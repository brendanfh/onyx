// This is a simple buffered system to receive events from the webbrowser
// in a buffer that you can poll and consume all of the events. It is not
// direclty used by the immediate mode graphics, but it makes standing up
// a simple application much easier.

package js_events

#private_file Num_Buffered_Events :: 16

// NOTE: These need to match exactly what is in the corresponding javascript
DomEventKind :: enum {
    None       :: 0x00;

    MouseDown  :: 0x01;
    MouseUp    :: 0x02;
    MouseMove  :: 0x03;
    MouseWheel :: 0x07;

    KeyDown    :: 0x04;
    KeyUp      :: 0x05;

    Resize     :: 0x06;
}

DomEvent :: struct {
    kind : DomEventKind;
    timestamp : u32;
}

KeyboardEvent :: struct {
    use event : DomEvent;

    keycode   : u32;      // Apparently, keyCode is deprecated on browsers now??? Stupid web standards that aren't "standards" at all.
    modifiers : Modifiers;

    // This is assuming that no single keyname is greater than 15 characters in length.
    // A quick look at https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values makes
    // me think that that isn't possible, but it's the web so anything is possible. ğŸ™„
    keyname       : [15] u8;
    keyname_count : u8;

    Modifiers :: enum #flags {
        CTRL  :: 0x01;
        ALT   :: 0x02;
        META  :: 0x04;
        SHIFT :: 0x08;
    }

    get_name :: (use e: ^KeyboardEvent) -> str do return str.{ ~~keyname, ~~keyname_count };
}

MouseEvent :: struct {
    use event : DomEvent;

    Button :: enum {
        Left :: 0x00;
        Middle :: 0x01;
        Right :: 0x02;

        WheelUp :: 0x03;
        WheelDown :: 0x04;
    }

    pos_x  : u32;
    pos_y  : u32;
    button : Button;
}

ResizeEvent :: struct {
    use event : DomEvent;

    width  : u32;
    height : u32;
}

Event :: struct #union {
    use dom : DomEvent;

    keyboard : KeyboardEvent;
    mouse    : MouseEvent;
    resize   : ResizeEvent;
}

clear_event :: (ev: ^Event) {
    ev.kind = DomEventKind.None;
    ev.timestamp = 0;
}

init :: () {
    event_storage.event_count = 0;
    event_storage.max_events = Num_Buffered_Events;

    for ^ev: event_storage.event_buffer do clear_event(ev);

    event_setup(^event_storage, sizeof Event);
}

consume :: () -> Iterator(Event) {
    next :: (_: rawptr) -> (Event, bool) {
        use package core.intrinsics.onyx { __zero_value }
        if event_storage.event_count == 0 do return __zero_value(Event), false;

        @CodeGeneration // This instruction (and all instructions involving Event) generate a TON of instructions because Event is a union.
        event := event_storage.event_buffer[0];

        for i: 0 .. Num_Buffered_Events - 2 {
            event_storage.event_buffer[i] = event_storage.event_buffer[i + 1];
        }
        event_storage.event_count -= 1;
        
        return event, true;
    }

    return .{ null, next };
}

/* Private members */

#private_file EventStorage :: struct {
    event_count  : u32;
    max_events   : u32;
    event_buffer : [Num_Buffered_Events] Event;
}

#private_file event_storage : EventStorage;
#private_file event_setup :: (event_storage: ^EventStorage, event_size: u32) -> void #foreign "js_events" "setup" ---
