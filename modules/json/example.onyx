
#load "core/std"
#load "modules/json/module"

use package core
json :: package json

json_string := "{ \"test\": \"\\tHello,\\n\\\"World!\\\"\", \"array\": [1,2,3,4,5,1423], \"sub\": { \"mem\": true, \"other\": null } }";

main :: (args: [] cstr) {
    arena := alloc.arena.make(context.allocator, 4096);
    defer alloc.arena.free(^arena);

    // decoded_json := json.decode(#file_contents "./dummy.json", alloc.arena.make_allocator(^arena));
    decoded_json := json.decode(json_string, alloc.arena.make_allocator(^arena));
    defer json.free(decoded_json);

    // root := decoded_json.root;
    // for v: root->as_array() {
    //     println(v["friends"][1]["name"]->as_str());
    // }

    #if true {
        value := decoded_json.root["array"];
        for v: value->as_array() {
            println(v->as_int());
        }
        test_str := decoded_json.root["sub"]["mem"]->as_bool();
        println(test_str);

        decoded_json.root["test"]->as_str() |> println();
    }

    json.encode(^stdio.print_writer, decoded_json.root["sub"]);
    print("\n");

    v_arr := array.make(Vector2);
    defer array.free(^v_arr);

    array.push(^v_arr, .{ 10, 20 });
    array.push(^v_arr, .{ 12.34, 45.67 });
    array.push(^v_arr, .{ 0, -10 });

    if err := json.encode(^stdio.print_writer, v_arr); err != .None {
        printf("Error formatting json %i", cast(i32) err);
    }
    print("\n");
}

Vector2 :: struct {
    x, y: f32;
}

#add_match json.encode, (w: ^io.Writer, v: Vector2) -> json.Encoding_Error {
    io.write_format(w, "{\"x\":%f,\"y\":%f}", v.x, v.y);

    return .None;
}