package json
use package core

null_value := Value.{}

Json :: struct {
    // This is the allocator for all of the values in the JSON tree.
    // It is not the allocator the arrays and objects however. Those
    // have their own allocator, which I'm assuming will always be
    // the general purpose heap allocator.
    allocator: Allocator;

    root: ^Value;
}

Error :: enum {
    None;
    EOF;
    Illegal_Character;
    String_Unterminated;
    Unexpected_Token;
}

Value :: struct {
    Type :: enum {
        Null :: 0x00;
        Bool;
        Integer;
        Float;
        String;
        Array;
        Object;
    }

    type := Type.Null;

    as_bool :: (v: ^Value) -> bool {
        if v == null do return false;

        if v.type == .Bool do return (cast(^Value_Bool) v).bool_;
        return false;
    }

    as_str :: (v: ^Value) -> str {
        if v == null do return null_str;

        if v.type == .String do return (cast(^Value_String) v).str_;
        return "";
    }

    as_int :: (v: ^Value) -> i64 {
        if v == null do return 0;

        if v.type == .Integer do return (cast(^Value_Integer) v).int_;
        return 0;
    }

    as_float :: (v: ^Value) -> f64 {
        if v == null do return 0;

        if v.type == .Float do return (cast(^Value_Float) v).float_;
        return 0;
    }

    as_array :: (v: ^Value) -> [..] ^Value {
        if v == null        do return .{ null, 0, 0, .{ null, null_proc } };
        if v.type != .Array do return .{ null, 0, 0, .{ null, null_proc } };

        return (cast(^Value_Array) v).array_;
    }

    is_null :: (v: ^Value) -> bool {
        if v == null do return true;
        return v == ^null_value || v.type == .Null;
    }
}

Value_Bool :: struct {
    use base := Value.{ type = .Bool };
    bool_: bool;
}

Value_Integer :: struct {
    use base := Value.{ type = .Integer };
    int_: i64;
}

Value_Float :: struct {
    use base := Value.{ type = .Float };
    float_: f64;
}

Value_String :: struct {
    use base := Value.{ type = .String };
    str_: str;
}

Value_Array :: struct {
    use base := Value.{ type = .Array };
    array_: [..] ^Value;
}

Value_Object :: struct {
    use base := Value.{ type = .Object };
    object_: [..] struct {
        key   : str;
        value : ^Value;
    };
}

#operator [] get
get :: (v: ^Value, key: str) -> ^Value {
    if v.type != .Object do return ^null_value;

    for ^entry: (cast(^Value_Object) v).object_ {
        if entry.key == key do return entry.value;
    }
    return ^null_value;
}

// This is an interesting operator overload, as it completely disables the
// ability to do array lookups on an array of values. So you cannot have an
// [..] Value, because the implementation of dynamic arrays heavily relies
// on the ability to do arr.data[...]. This isn't a problem for this program,
// but this is why I waited on adding overloading to '[]'.
#operator [] get_idx
get_idx :: (v: ^Value, idx: i32) -> ^Value {
    if v.type != .Array do return ^null_value;

    v_arr := cast(^Value_Array) v;
    if idx < 0 || idx >= v_arr.array_.count do return ^null_value;

    return v_arr.array_[idx];
}

free :: #match {
    (v: ^Value, allocator: Allocator) do switch v.type {
        case .String {
            v_str := cast(^Value_String) v;
            raw_free(allocator, v_str.str_.data);
        }

        case .Array {
            v_arr := cast(^Value_Array) v;
            for elem: v_arr.array_ {
                free(elem, allocator);
            }
            array.free(^v_arr.array_);
        }

        case .Object {
            v_obj := cast(^Value_Object) v;
            for ^entry: v_obj.object_ {
                raw_free(allocator, entry.key.data);
                free(entry.value, allocator);
            }
            array.free(^v_obj.object_);
        }
    },

    (use j: Json) {
        free(root, allocator);
    },
}
