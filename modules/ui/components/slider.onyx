package ui

use package core

Slider_Theme :: struct {
    use text_theme := Text_Theme.{};
    use animation_theme := Animation_Theme.{};

    box_color        := gfx.Color4.{ 0.1, 0.1, 0.1 };
    box_border_color := gfx.Color4.{ 0.2, 0.2, 0.2 };
    box_border_width := 4.0f;   @InPixels

    bar_color                := gfx.Color4.{ 0.4, 0.4, 0.4 };
    bar_hover_color          := gfx.Color4.{ 0, 0, 1 };
    bar_hover_negative_color := gfx.Color4.{ 1, 0, 0 }; // The color when value is less than 0
}

default_slider_theme := Slider_Theme.{};

slider :: (use r: Rectangle, value: ^$T, min_value: T, max_value: T, theme := ^default_slider_theme, site := #callsite, increment := 0) -> bool {
    result := false;

    hash := get_site_hash(site, increment);
    animation_state := map.get(^animation_states, hash);
    width, height := Rectangle.dimensions(r);

    if is_hot_item(hash) {
        if mouse_state.left_button_down {
            set_active_item(hash);
            result = true;

            // Animate this?
            x := mouse_state.x - x0;

            if T == i32 || T == i64 || T == u32 || T == u64 {
                step_width := width / ~~math.abs(max_value - min_value);
                percent := (x + step_width / 2) / width;
                *value = math.lerp(percent, min_value, max_value);
                *value = math.clamp(*value, min_value, max_value);

            } else {
                percent := x / width;
                *value = math.lerp(percent, min_value, max_value);
                *value = math.clamp(*value, min_value, max_value);
            }

        } else {
            set_active_item(0);
        }
    }

    if Rectangle.contains(r, mouse_state.x, mouse_state.y) {
        set_hot_item(hash);
    }

    if is_hot_item(hash) {
        move_towards(^animation_state.hover_time, 1.0f, theme.hover_speed);
    } else {
        move_towards(^animation_state.hover_time, 0.0f, theme.hover_speed);
    }

    box_border_width := theme.box_border_width;

    bar_color := theme.bar_color;
    if *value < 0 do bar_color = color_lerp(animation_state.hover_time, bar_color, theme.bar_hover_negative_color);
    else          do bar_color = color_lerp(animation_state.hover_time, bar_color, theme.bar_hover_color);

    gfx.set_texture();
    gfx.rect(.{ x0, y0 }, .{ width, height }, theme.box_border_color);
    gfx.rect(
        .{ x0 + box_border_width, y0 + box_border_width },
        .{ width - box_border_width * 2, height - box_border_width * 2 },
        theme.box_border_color);

    box_width := cast(f32) (*value - min_value) / ~~(max_value - min_value);
    box_width *= width - box_border_width * 2;
    box_width  = math.clamp(box_width, 0, width - box_border_width * 2);
    gfx.rect(
        .{ x0 + box_border_width, y0 + box_border_width },
        .{ box_width, height - box_border_width * 2 },
        bar_color);

    if animation_state.click_time > 0 || animation_state.hover_time > 0 {
        map.put(^animation_states, hash, animation_state);
    } else {
        map.delete(^animation_states, hash);
    }

    return result;
}
