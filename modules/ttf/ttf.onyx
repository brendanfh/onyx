package ttf

use package core

True_Type_Font :: struct {
    reader : TTF_Reader;

    scalar_type    : u32;
    search_range   : u16;
    entry_selector : u16;
    range_shift    : u16;

    tables : map.Map(u32, TTF_Table_Info);
    char_maps : [..] TTF_Cmap;

    version : u32;
    font_revision : u32;
    checksum_adjustment : u32;
    magic_number : u32;
    flags : u16;
    units_per_em : u16;
    // created : u64;
    // modified : u64;
    x_min : i16;
    x_max : i16;
    y_min : i16;
    y_max : i16;
    mac_style : u16;
    lowest_rec_ppem : u16;
    font_direction_hint : i16;
    index_to_loc_format : TTF_Index_To_Loc_Format;
    glyph_data_format : i16;

    hhea : struct {
        version : u32;
        ascent  : i16;
        descent : i16;
        line_gap : i16;
        advance_width_max : u16;
        min_left_side_bearing : i16;
        min_right_side_bearing : i16;
        x_max_extent : i16;
        caret_slope_rise : i16;
        caret_slope_run : i16;
        caret_offset : i16;
        metric_data_format : i16;
        num_of_long_hor_metrics : u16;
    };
}

TTF_Table_Info :: struct {
    checksum : u32 = 0;
    offset   : u32 = 0;
    length   : u32 = 0;
}

TTF_Index_To_Loc_Format :: enum (i16) {
    Short :: 0x00;
    Long  :: 0x01;
}

TTF_Glyph :: struct {
    contour_count : i16;
    x_min : i16;
    x_max : i16;
    y_min : i16;
    y_max : i16;

    points : [..] TTF_Glyph_Point;
    contour_ends : [..] u16;
}

TTF_Glyph_Point :: struct {
    on_curve : bool;
    x : i16 = 0;
    y : i16 = 0;
}


TTF_Cmap_Format :: enum (u16) {
    Simple    :: 0x00;
    Segmented :: 0x04;
}

TTF_Cmap_Base  :: struct { format : TTF_Cmap_Format; }

TTF_Cmap0 :: struct {
    use base: TTF_Cmap_Base;

    glyph_indicies: [] u8;
}

TTF_Cmap4 :: struct {
    use base: TTF_Cmap_Base;

    seg_count      : u16;
    search_range   : u16;
    entry_selector : u16;
    range_shift    : u16;

    segments : [..] TTF_Segment;
    cache    : map.Map(i32, i32);
}

TTF_Segment :: struct {
    start_code      : u16;
    end_code        : u16;
    id_delta        : u16;
    id_range_offset : u16;
}

TTF_Cmap :: struct #union {
    use base: TTF_Cmap_Base;
    cmap0: TTF_Cmap0;
    cmap4: TTF_Cmap4;
}


ttf_create :: (ttf_data: [] u8) -> True_Type_Font {
    ttf : True_Type_Font;
    ttf.reader = TTF_Reader.{ data = ttf_data };

    map.init(^ttf.tables, .{});
    array.init(^ttf.char_maps);

    ttf_read_offset_table(^ttf);
    ttf_read_head_table(^ttf);
    ttf_read_cmap_table(^ttf);
    ttf_read_hhea_table(^ttf);

    return ttf;
}

#private
ttf_read_offset_table :: (use ttf: ^True_Type_Font) {
    scalar_type = reader->get_u32();
    num_tables := reader->get_u16();
    search_range = reader->get_u16();
    entry_selector = reader->get_u16();
    range_shift = reader->get_u16();

    for i: 0 .. ~~num_tables {
        tag := reader->get_string(4);
        tag_int := string_to_beu32(tag);
        println(tag);

        table_info : TTF_Table_Info;
        table_info.checksum = reader->get_u32();
        table_info.offset   = reader->get_u32();
        table_info.length   = reader->get_u32();

        map.put(^tables, tag_int, table_info);

        if !string.equal(tag, "head") {
            csum := ttf_calc_table_checksum(^reader, table_info.offset, table_info.length);
            if table_info.checksum != csum {
                print("WARNING: Checksum for table '");
                print(tag);
                print("' did not match.");
            }
        }
    }
}

#private
ttf_read_head_table :: (use ttf: ^True_Type_Font) {
    head_table_info  := map.get(^tables, string_to_beu32("head"));
    reader->seek(head_table_info.offset);

    version = reader->get_u32();
    font_revision = reader->get_u32();
    checksum_adjustment = reader->get_u32();
    magic_number = reader->get_u32();            // NOTE: Should be 0x5f0f3cf5
    assert(magic_number == 0x5f0f3cf5, "Magic number was wrong.");

    flags = reader->get_u16();
    units_per_em = reader->get_u16();
    reader->get_date(); // created
    reader->get_date(); // modified
    x_min = reader->get_fword();
    y_min = reader->get_fword();
    x_max = reader->get_fword();
    y_max = reader->get_fword();
    mac_style = reader->get_u16();
    lowest_rec_ppem = reader->get_u16();
    font_direction_hint = reader->get_i16();
    index_to_loc_format = cast(TTF_Index_To_Loc_Format) reader->get_i16();
    glyph_data_format = reader->get_i16();
}

ttf_lookup_glyph_offset :: (use ttf: ^True_Type_Font, glyph_index: i32) -> i32 {
    loca_table_info := map.get(^tables, string_to_beu32("loca"));
    glyf_table_info := map.get(^tables, string_to_beu32("glyf"));

    old: u32;
    defer reader->seek(old);

    switch index_to_loc_format {
        case .Long {
            old = reader->seek(loca_table_info.offset + glyph_index * 4);
            return reader->get_u32() + glyf_table_info.offset;
        }

        case #default {
            old = reader->seek(loca_table_info.offset + glyph_index * 2);
            return 2 * cast(u32) reader->get_u16() + glyf_table_info.offset;
        }
    }

    return -1;
}

// Result is expected to be freed
ttf_read_glyph :: (use ttf: ^True_Type_Font, glyph_index: i32, allocator := context.allocator) -> ^TTF_Glyph {
    offset := ttf_lookup_glyph_offset(ttf, glyph_index);

    glyf_table_info := map.get(^tables, string_to_beu32("glyf"));

    if offset >= glyf_table_info.offset + glyf_table_info.length do return null;

    reader->seek(offset);

    glyph := make(TTF_Glyph, allocator);
    glyph.contour_count = reader->get_i16();
    glyph.x_min = reader->get_fword();
    glyph.y_min = reader->get_fword();
    glyph.x_max = reader->get_fword();
    glyph.y_max = reader->get_fword();

    if glyph.contour_count < 0 { raw_free(allocator, glyph); return null; }
    if glyph.contour_count == -1 {
        // Compound glyph
        return null;

    } else {
        // Simple glyph
        ttf_read_simple_glyph(ttf, glyph);
    }

    return glyph;
}

ttf_glyph_destroy :: (glyph: ^TTF_Glyph, allocator := context.allocator) {
    array.free(^glyph.contour_ends);
    array.free(^glyph.points);
    raw_free(allocator, glyph);
}

#private_file
TTF_Glyph_Flags :: enum #flags {
    On_Curve  :: 0x01;
    X_Is_Byte :: 0x02;
    Y_Is_Byte :: 0x04;
    Repeat    :: 0x08;
    X_Delta   :: 0x10;
    Y_Delta   :: 0x20;
}

#private_file
ttf_read_simple_glyph :: (use ttf: ^True_Type_Font, glyph: ^TTF_Glyph) {
    array.init(^glyph.contour_ends, ~~glyph.contour_count);
    array.init(^glyph.points);

    for i: 0 .. ~~glyph.contour_count {
        array.push(^glyph.contour_ends, reader->get_u16());
    }

    reader->seek(~~ reader->get_u16() + reader->tell());

    if glyph.contour_count == 0 do return;

    num_points := array.fold(^glyph.contour_ends, cast(u16) 0, math.max_poly) + 1;

    flags : [..] TTF_Glyph_Flags;
    array.init(^flags);
    defer array.free(^flags);

    for i: 0 .. ~~num_points {
        flag := cast(TTF_Glyph_Flags) reader->get_u8();
        array.push(^flags, flag);
        array.push(^glyph.points, .{ on_curve = (flag & .On_Curve) != ~~ 0 });

        if (flag & .Repeat) != ~~ 0 {
            rep_count := reader->get_u8();
            i += ~~rep_count;

            for i: 0 .. ~~rep_count {
                array.push(^flags, flag);
                array.push(^glyph.points, .{ on_curve = (flag & .On_Curve) != ~~ 0 });
            }
        }
    }

    value := cast(i16) 0;
    for i: 0 .. ~~num_points {
        flag := flags[i];

        if (flag & .X_Is_Byte) != ~~ 0 {
            if (flag & .X_Delta) != ~~ 0 {
                value += ~~ reader->get_u8();
            } else {
                value -= ~~ reader->get_u8();
            }
        } elseif (flag & .X_Delta) == ~~ 0 {
            value += reader->get_i16();
        }

        glyph.points[i].x = value;
    }

    value = 0;
    for i: 0 .. ~~num_points {
        flag := flags[i];

        if (flag & .Y_Is_Byte) != ~~ 0 {
            if (flag & .Y_Delta) != ~~ 0 {
                value += ~~ reader->get_u8();
            } else {
                value -= ~~ reader->get_u8();
            }
        } elseif (flag & .Y_Delta) == ~~ 0 {
            value += reader->get_i16();
        }

        glyph.points[i].y = value;
    }
}

ttf_glyph_count :: (use ttf: ^True_Type_Font) -> u32 {
    maxp_table_info  := map.get(^tables, string_to_beu32("maxp"));
    old := reader->seek(maxp_table_info.offset + 4);
    defer reader->seek(old);

    return ~~reader->get_u16();
}

ttf_read_cmap_table :: (use ttf: ^True_Type_Font) {
    cmap_table_info  := map.get(^tables, string_to_beu32("cmap"));
    reader->seek(cmap_table_info.offset);

    version := reader->get_u16();
    num_subtables := reader->get_u16();

    for i: 0 .. ~~num_subtables {
        platform_id := reader->get_u16();
        platform_specific_id := reader->get_u16();
        offset := reader->get_u16();

        // Microsoft Unicode, BMP only
        if platform_id == 3 && platform_specific_id <= 1 {
            ttf_read_cmap(ttf, ~~offset + cmap_table_info.offset);
        }
    }
}

ttf_read_cmap :: (use ttf: ^True_Type_Font, offset: u32) {
    old := reader->seek(offset);
    defer reader->seek(old);

    format := cast(TTF_Cmap_Format) reader->get_u16();
    length := reader->get_u16();
    lang   := reader->get_u16();

    switch format {
        case .Simple    do ttf_read_cmap0(ttf);
        case .Segmented do ttf_read_cmap4(ttf);

        case #default { printf("Unsupported cmap format: %i\n", cast(i32) format); }
    }
}

ttf_read_cmap0 :: (use ttf: ^True_Type_Font) {
    cmap : TTF_Cmap;
    cmap.cmap0.format = .Simple;

    glyphs : [..] u8;
    array.init(^glyphs, 256);
    for i: 0 .. 256 do array.push(^glyphs, reader->get_u8());

    cmap.cmap0.glyph_indicies = array.to_slice(^glyphs);

    array.push(^char_maps, cmap);
}

ttf_read_cmap4 :: (use ttf: ^True_Type_Font) {
    cmap : TTF_Cmap;
    cmap.cmap4.format = .Segmented;
    imap := ^cmap.cmap4;
    map.init(^imap.cache);

    imap.seg_count = reader->get_u16() >> 1;
    imap.search_range = reader->get_u16();
    imap.entry_selector = reader->get_u16();
    imap.range_shift = reader->get_u16();

    array.init(^imap.segments, ~~imap.seg_count);
    imap.segments.count = cast(u32) imap.seg_count;

    for ^seg: imap.segments do seg.end_code        = reader->get_u16();
    reader->get_u16(); // Reserved and unused
    for ^seg: imap.segments do seg.start_code      = reader->get_u16();
    for ^seg: imap.segments do seg.id_delta        = reader->get_u16();
    for ^seg: imap.segments {
        seg.id_range_offset = reader->get_u16();
        if seg.id_range_offset != ~~0 do seg.id_range_offset += ~~(reader->tell() - 2);
    }

    array.push(^char_maps, cmap);
}

ttf_lookup_glyph_by_char :: (use ttf: ^True_Type_Font, charcode: u32) -> u32 {
    potential_code := 0;

    for ^cmap: char_maps {
        switch cmap.format {
            case .Simple    do potential_code = ttf_lookup_in_cmap0(ttf, ~~cmap, charcode);
            case .Segmented do potential_code = ttf_lookup_in_cmap4(ttf, ~~cmap, charcode);
        }

        if potential_code != 0 do return potential_code;
    }

    return potential_code;
}

#private_file
ttf_lookup_in_cmap0 :: (use ttf: ^True_Type_Font, cmap: ^TTF_Cmap0, charcode: u32) -> u32 {
    if charcode < 0 || charcode >= 256 do return 0;
    return ~~cmap.glyph_indicies[charcode];
}

#private_file
ttf_lookup_in_cmap4 :: (use ttf: ^True_Type_Font, cmap: ^TTF_Cmap4, charcode: u32) -> u32 {
    if map.has(^cmap.cache, charcode) do return map.get(^cmap.cache, charcode);

    index := 0;
    for ^seg: cmap.segments {
        if ~~seg.start_code <= charcode && ~~charcode <= seg.end_code {
            if seg.id_range_offset != 0 {
                glyph_index_address := ~~seg.id_range_offset + 2 * (charcode - ~~seg.start_code);
                reader->seek(glyph_index_address);
                index = cast(u32) reader->get_u16();
            } else {
                index = (~~seg.id_delta + charcode) & 0xffff;
            }

            break;
        }
    }

    map.put(^cmap.cache, charcode, index);

    return index;
}


ttf_read_hhea_table :: (use ttf: ^True_Type_Font) {
    hhea_table_info  := map.get(^tables, string_to_beu32("hhea"));
    reader->seek(hhea_table_info.offset);

    hhea.version = reader->get_u32();
    hhea.ascent  = reader->get_fword();
    hhea.descent = reader->get_fword();
    hhea.line_gap = reader->get_fword();
    hhea.advance_width_max = reader->get_u16();
    hhea.min_left_side_bearing = reader->get_u16();
    hhea.min_right_side_bearing = reader->get_u16();
    hhea.x_max_extent = reader->get_fword();
    hhea.caret_slope_rise = reader->get_i16();
    hhea.caret_slope_run = reader->get_i16();
    hhea.caret_offset = reader->get_fword();
    reader->get_i16(); // Reserved
    reader->get_i16(); // Reserved
    reader->get_i16(); // Reserved
    reader->get_i16(); // Reserved
    hhea.metric_data_format = reader->get_i16();
    hhea.num_of_long_hor_metrics = reader->get_u16();
}

TTF_Horizontal_Metrics :: struct {
    advance_width     : u16;
    left_side_bearing : i16;
}

ttf_lookup_horizontal_metrics :: (use ttf: ^True_Type_Font, glyph_index: u32) -> TTF_Horizontal_Metrics {
    hmtx_table_info  := map.get(^tables, string_to_beu32("hmtx"));
    offset := hmtx_table_info.offset;

    hmtx : TTF_Horizontal_Metrics;

    nmets := cast(u32) hhea.num_of_long_hor_metrics;

    if glyph_index < nmets {
        offset += glyph_index * 4;
        old := reader->seek(offset);
        defer reader->seek(old);

        hmtx.advance_width = reader->get_u16();
        hmtx.left_side_bearing = reader->get_i16();

    } else {
        old := reader->seek(offset + (nmets - 1) * 4);
        defer reader->seek(old);

        hmtx.advance_width = reader->get_u16();
        reader->seek(offset + nmets * 4 + 2 * (glyph_index - nmets));
        hmtx.left_side_bearing = reader->get_i16();
    }

    return hmtx;
}


#private_file
ttf_calc_table_checksum :: (reader: ^TTF_Reader, offset: u32, length: u32) -> u32 {
    old := reader->seek(offset);
    defer reader->seek(old);

    sum := 0;
    nlongs := (length + 3) >> 2;
    for i: 0 .. nlongs do sum += reader->get_u32();
    return sum;
}

#private_file
string_to_beu32 :: (s: str) -> u32 {
    return (cast(u32) s[0] << 24)
         | (cast(u32) s[1] << 16)
         | (cast(u32) s[2] << 8)
         | (cast(u32) s[3]);
}
