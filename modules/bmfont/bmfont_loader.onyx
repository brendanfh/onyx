package bmfont

use package core


load_bmfont :: (fnt_data: [] u8) -> BMFont {
    bmf: BMFont;
    map.init(^bmf.pages);
    map.init(^bmf.glyphs);

    parse_bmfont(fnt_data, ^bmf);

    @Cleanup // this was a stupid way of doing this. Just use a f-ing for loop.
    array.map(^bmf.glyphs.entries, ^bmf, (glyph: ^map.Map.Entry(i32, BMFont_Glyph), font: ^BMFont) {
        glyph.value.tex_x = ~~ glyph.value.x / cast(f32) font.common.scale_width;        
        glyph.value.tex_y = ~~ glyph.value.y / cast(f32) font.common.scale_width;        
        glyph.value.tex_w = ~~ glyph.value.w / cast(f32) font.common.scale_width;        
        glyph.value.tex_h = ~~ glyph.value.h / cast(f32) font.common.scale_width;        
    });

    return bmf;
}

#private_file
parse_bmfont :: (fnt_data: [] u8, font: ^BMFont) {
    R :: package core.string.reader

    parser_arena := alloc.arena.make(context.allocator, arena_size=4 * 1024);
    parser_allocator := alloc.arena.make_allocator(^parser_arena);
    defer alloc.arena.free(^parser_arena);

    reader := R.make(fnt_data);

    while !R.empty(^reader) {
        line := R.read_line(^reader);
        pieces := string.split(line, #char " ", allocator=parser_allocator);

        tag := pieces[0];
        pieces = pieces.data[1 .. pieces.count];

        if tag == "page" {
            id := -1;
            filename := null_str;

            for ^piece: pieces {
                key := string.read_until(piece, #char "=");
                string.advance(piece, 1);

                if key == "id"   do id = ~~ conv.str_to_i64(*piece);
                if key == "file" do filename = string.alloc_copy(*piece);
            }

            map.put(^font.pages, id, filename);
            continue;
        }

        if tag == "char" {
            char: BMFont_Glyph;

            for ^piece: pieces {
                key := string.read_until(piece, #char "=");
                string.advance(piece, 1);

                if     key == "id"       do char.id = ~~ conv.str_to_i64(*piece);
                elseif key == "x"        do char.x  = ~~ conv.str_to_i64(*piece);
                elseif key == "y"        do char.y  = ~~ conv.str_to_i64(*piece);
                elseif key == "width"    do char.w  = ~~ conv.str_to_i64(*piece);
                elseif key == "height"   do char.h  = ~~ conv.str_to_i64(*piece);
                elseif key == "xoffset"  do char.xoffset = ~~ conv.str_to_i64(*piece);
                elseif key == "yoffset"  do char.yoffset = ~~ conv.str_to_i64(*piece);
                elseif key == "xadvance" do char.xadvance = ~~ conv.str_to_i64(*piece);
                elseif key == "page"     do char.page = ~~ conv.str_to_i64(*piece);
                elseif key == "chhl"     do char.channel = ~~ conv.str_to_i64(*piece);
            }

            map.put(^font.glyphs, char.id, char);
            continue;
        }

        @Note // this for loop is very destructive of the data that is here, but
        // it is assumed that after a line is processed, the data will not be needed
        // again. To be clear, this means that it destroys the pieces from the split,
        // not the data in fnt_data.
        for ^piece: pieces {
            key := string.read_until(piece, #char "=");
            string.advance(piece, 1);

            if tag == "info"   do parse_info_tag(font, parser_allocator, key, *piece);
            if tag == "common" do parse_common_tag(font, parser_allocator, key, *piece);
        }
    }

    parse_info_tag :: (font: ^BMFont, parser_allocator: Allocator, key: str, value: str) {
        info := ^font.info;

        if     key == "face"     do info.face_name = string.alloc_copy(value);
        elseif key == "size"     do info.size = ~~ conv.str_to_i64(value);
        elseif key == "bold"     do info.bold   = value == "1";
        elseif key == "italic"   do info.italic = value == "1";
        elseif key == "charset"  do info.charset = string.alloc_copy(value);
        elseif key == "unicode"  do info.unicode = value == "1";
        elseif key == "stretchH" do info.stretchH = ~~ conv.str_to_i64(value);
        elseif key == "smooth"   do info.smooth = value == "1";
        elseif key == "aa"       do info.supersampling = ~~ conv.str_to_i64(value);

        elseif key == "padding" {
            values := string.split(value, #char ",", allocator=parser_allocator);
            info.padding.top    = ~~ conv.str_to_i64(values[0]);
            info.padding.right  = ~~ conv.str_to_i64(values[1]);
            info.padding.bottom = ~~ conv.str_to_i64(values[2]);
            info.padding.left   = ~~ conv.str_to_i64(values[3]);
        }

        elseif key == "spacing" {
            values := string.split(value, #char ",", allocator=parser_allocator);
            info.spacing.horizontal = ~~ conv.str_to_i64(values[0]);
            info.spacing.vertical   = ~~ conv.str_to_i64(values[1]);
        }
    }

    parse_common_tag :: (font: ^BMFont, parser_allocator: Allocator, key: str, value: str) {
        common := ^font.common;

        if     key == "lineHeight" do common.line_height = ~~ conv.str_to_i64(value);
        elseif key == "base"       do common.baseline = ~~ conv.str_to_i64(value);
        elseif key == "scaleW"     do common.scale_width = ~~ conv.str_to_i64(value);
        elseif key == "scaleH"     do common.scale_height = ~~ conv.str_to_i64(value);
        elseif key == "pages"      do common.page_count = ~~ conv.str_to_i64(value);
        elseif key == "packed"     do common.packed = value == "1";
        elseif key == "alphaChnl"  do common.alpha_channel = ~~ conv.str_to_i64(value);
        elseif key == "redChnl"    do common.red_channel   = ~~ conv.str_to_i64(value);
        elseif key == "greenChnl"  do common.alpha_channel = ~~ conv.str_to_i64(value);
        elseif key == "blueChnl"   do common.blue_channel  = ~~ conv.str_to_i64(value);
    }
}
