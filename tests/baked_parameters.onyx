#load "core/std/js"

use package core

count_to :: proc ($N: i32) {
    for i: 0 .. N do printf("%i ", i);
    print("\n");
}

alloc_slice :: proc ($T: type_expr, N: i32) -> [] T {
    data := cast(^T) calloc(sizeof T * N);
    return <[] T>.{ data, N };
}

count_to_30 :: #solidify count_to { N = #value 30 };

main :: proc (args: [] cstr) {
    count_to(5);
    count_to(10);
    count_to_30();

    // This counts as a compile-time known value.
    UP_TO :: 100;
    count_to(UP_TO);

    sl := alloc_slice(i32, 10);
    for ^elem: sl do *elem = 1234;

    for elem: sl do println(elem);


    // This is so much cleaner than the alternative.
    ages := map.make(str, u32, default=0);
    defer map.free(^ages);

    map.put(^ages, "Dwight", 32);
    map.put(^ages, "Jim", 25);
    map.put(^ages, "Pam", 24);

    print_age :: proc (ages: ^map.Map(str, u32), name: str) {
        age := map.get(ages, name);
        printf("%s's age is %i.\n", name, age);
    }

    print_age(^ages, "Dwight");
    print_age(^ages, "Jim");
    print_age(^ages, "Pam");
    print_age(^ages, "Michael");
}

