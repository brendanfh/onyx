#load "core/std"

use package core

Point :: struct {
    x, y : i32;
}

LineInterp :: struct {
    ox, oy : i32;
    dx, dy : i32;
}

line_interp_at :: (use li: LineInterp, t: i32) -> Point {
    return .{ ox + dx * t, oy + dy * t };
}

main :: (args: [] cstr) {
    contents := #file_contents "./tests/aoc-2020/input/day3.txt";

    forest := array.make(u8, 1024);
    defer array.free(^forest);

    width := 0;
    height := 0;
    while true {
        line := string.read_until(^contents, #char "\n");
        string.advance(^contents, 1);
        if line.count == 0 do break;

        width = line.count;
        height = height + 1;

        for ch: line do array.push(^forest, ch);
    }

    lis : [5] LineInterp;
    lis[0] = .{ 0, 0, 1, 1 };
    lis[1] = .{ 0, 0, 3, 1 };
    lis[2] = .{ 0, 0, 5, 1 };
    lis[3] = .{ 0, 0, 7, 1 };
    lis[4] = .{ 0, 0, 1, 2 };

    tree_prod: u64 = 1;

    for li: lis {
        tree_count: u64 = 0;
        while i := 0; true {
            p := line_interp_at(li, i); 
            if p.y >= height || p.y < 0 do break; 
            i += 1;

            p.x %= width;

            if forest[p.x + p.y * width] == #char "#" do tree_count += 1;
        }

        tree_prod *= tree_count;
    }

    printf("Tree product: %l\n", tree_prod);
}
