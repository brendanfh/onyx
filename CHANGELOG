Release v0.0.7
--------------
This release contains MANY CHANGES because I am terrible at keeping up to date with a
proper changelog and release schedule. Basically, this is the first release where I
feel like the language is at a good place. Many "gotcha" bugs have been resolved and
the language is much more powerful now for it. There are still plenty of things that
are going to be changed and added in the future, but first I want to get this better
version out there in a packaged format.

Additions:
* overloaded procedures can have polymorphic and overloaded procedures as overloads.  This makes them MUCH more powerful.
* types are not required on struct members that have default values. This is still very experimental so there are some
    noticable bugs with it. You can always specify the type explicitly if you have issues.
* structure definitions act like name spaces and can have top-level expressions defined within them, such as procedures
    or other structures.
* structures can be "used" to bring in the aforementioned top-level expressions into the current scope.
* experimental method call syntax using ->.
* compound declarations for procedure locals and struct members that are of the same type.
* custom iterators using the builtin structure, Iterator(T). This the semantics will be written out elsewhere but long
    story short, you can have custom iterators using the language's 'for' statement.
* '--print-function-mappings' to see where a wasm function comes from in the source text.
* logging allocator. Wraps any allocator and prints what kind of allocations are happening.
* many math functions.
* basics of reading environment variables

Removals:

Changes:
* the "proc" keyword is now optional in a lot of cases. There are inevitably some bugs with this change,
    but you can always add it in when it may be necessary. Note, that for overloaded procedures, "proc"
    is still required.
* operator overloading is now done as a top level declaration handled through the entity
    system, instead of relying on creating a procedure. This lets you use an existing
    procedure as an operator overload. Take a look at '#operator ==' in string.onyx.
* Tons of internal code cleanup relating to structures and code generation.

Bug fixes:
* Too many more to even start listing them all.


Release v0.0.6
--------------
Additions:
* Compilation on Windows. All you should need is `cl.exe` in the current environment,
    and then simply run `build.bat`. I haven't thoroughly tested this, but I believe
    it will work on many systems. ARM / PowerPC may not work correctly.
* procedures can be polymorphic on an array size.
* structures can be polymorphic on any compile-time known value.
* procedures can be polymoprhic on any compile-time known value, including type expressions.
* basics of operator overloading using `#operator +`.
* multiple return values and multiple assignment / declarations.
* #solidify directive for explicitly specifying type variables in polymorphic procs.
* properly different kinds of allocators in core/alloc/.
* `null_proc` in builtin.onyx type matches against all procedure types, allowing for a
    'null' procedure.
* '-VV' and '-VVV' for very verbose printing. Easier to nail down compiler issues because it stops
    printing in the entity where the problem is.
* `io.Stream` API with `io.Reader` and `io.Writer`.
* ranges on switch cases, i.e. `case 4 .. 10`. Note, this is inclusive on the upper end,
    unlike most other uses of the range literal.
* miscellaneous core library functions

Removals:
* struct literals can no longer specify values for members brought in through a `use`.
* Makefile; just use ./build.sh or ./build.bat

Changes:
* `::` declarations in a procedure are treated differently now. They used to represent a constant
    value, but one that was still computed at the assignment site. Now, they instead are used to
    declare top level expressions in the procedure scope. This means that things like structs and
    enums can be declared at any block scope. The top-level expressions currently do not have
    access to polymoprhic variables in the procedure.
* `#include_file` is now `#load` and `#include_folder` is now `#load_path`. I like the shorter names.
* enum values are compile time known.
* struct literals are compile time known can be used at top level scope.
* range literals are proper things in the compiler code now.
* polymorphic procedure generation code is much cleaner now, making new polymorphic features easier.
* procedures can be part of top-level struct literals.
* `raw_alloc` and `raw_resize` take alignment arguments, with defaults provided.

Bug fixes:
* polymorphic procedures would get 'confused' when two structs in the program had the same name.
* function argument type mismatch would give wrong function name.
* `structs` with `use`d members caused all sorts of problems.
* bug fix with field access of unknown type causing infinite loop.
* auto-cast in overloaded function call resulted in no match found, even though there was one.
* struct member defaults were processed too early in the pipeline, causing errors.
* assignment of array type with array literal optimization.
* probably many more since everything is compiled with warnings now.
* deferred statements are correctly executed with break, continue and fallthrough.
* `0..10` was not parsed correctly.


Release v0.0.5
--------------
Additions:
* array literals; use (type).[ (vals) ] as the syntax; They work as global variables, and
    local variables, and as intermediates (such as function arguments).
* polymorphic procedures can be instantiated in many more places now due to clean up.
* added #context_scope block. It automatically stores and restores the context at the beginning
    and the end of the block respectively.
* 'use' statements work on pointers to structures.
* '--fun' flag displays a bar graph of where each of the entities in the compilation
    pipeline are. Compiles the program slower purely to make it look better.
* --verbose prints statistics about the compilation including time taken, lines
    processed and token processed.
* 'abs' function in core/math.onyx.
* 'read_word' in core.string.reader.
* Better error reporting for invaild binary operators.

Removals:
* field accesses on things that are not lvals. This was a bug anyway, so it
    should not require any code changes, but the feature is gone.
* i32map, strmap, ptrmap modules. Use generic map in map.onyx instead.

Changes:
* BREAKING: The type name 'string', and the package name 'str', have been swapped.
* 'use' statements are more powerful. 'use package' can occur at any scope level,
    and 'use <value>' can occur at file scope.
* struct literals can now have arbitrary package prefixes on them, i.e.
    some.deeply.nested.packages.Struct.{ ... };
* struct literals can have arbitrary expressions as their type, i.e.
    (#type [] void).{ ... };
* cleaned up CLI
* assignment over an array type copies the array instead of just the pointer.

Bug fixes:
* globals that were #foreign caused several bugs, which have been squashed.
* field accesses can only happen on lvals.
* Bitwise NOT on unsigned integers did not work.
* 'use' statements now work in polymorphic procedures
* resizing heap allocated memory at the end of memory would not grow underlying memory.
* stack position variables introduced from for loops, ifs, whiles, or switchs would produce
    very bad side effects if they were not in a stack based function.
* array.remove was broken when the semantics of `for: lo .. hi` changed.


Release v0.0.4
--------------
Additions:
* Ability to pass complicated structs by value. Very useful in polymorphic data types.
* bitwise not operator, ~
* auto cast operator, ~~. In many circumstances, will automatically determine what to cast to.
    - Will also report errors in the cast is not possible.
* Arbitrarily typed varargs. They behave similar to C-style varargs.
* vararg_get builtin procedure to retrieve a value from a ... vararg.
* #private_file directive for placing a symbol at file scope.
* a basic implentation of printf in the standard library.
* use statements at the function level.
* nested packages, i.e. 'core.array'
    - Still testing it out; could change at in the future
* basic printf implementation
* core.str.reader library

Removals:

Changes:
* Massive renaming of packages, since nested packages are now allowed.
    - Most collections of function simply were put into a package, instead of being prefixed,
        i.e. array_map -> array.map
* Numeric literals now no longer have a concrete type; they become whatever type is needed,
    reporting an error if that is not possible.
* Procedure definitions now require parentheses, even if there are no arguments. This was
    done to allow for `proc { foo, bar }` to be the overload syntax.
* array.map takes an arbitrary parameter of polymorphic type to make up for the fact that
    anonymous procs do not have closure. New type signature is:
        array_map :: proc (arr: ^[..] $T, data: $R, f: proc (T, R) -> T)
* better syntax highlighting for VIM.
* Compiler internals changed to make it easier to do advanced things in the future. 

Bug fixes:
* many bugs related to var args and procedure calls in general.
* polymorphic structs caused segmentation fault when trying to produce an error message.
* polymorhpic structs caused scope to change when using a struct literal of a polymoprhic type.
* #char "\"" did not work.
* nested function calls returning non-basic types would simply be wrong.
* Recursive structs are no longer possible.
* For loop array/slice/dynarray used to use signed indicies, which was wrong.



Release v0.0.3
--------------
Additions:
* Added polymorphic structs.
* Added polymorphic structs to polymorphic pattern matching.
* Added I32Map polymorphic structure to core library.
* Added println to core library; print followed by a newline.
* Added tests/ folder and runtests.sh which will compile and execute the programs in the
    folder and test against their expected output.
* #private_file for specifying symbols at the file scope.

Removals:

Changes:
* BREAKING: 'use package' now places included symbols at the file scope, not package scope.
* Switched to using TCC as the primary compiler, while maintaining support for GCC.
* boolean literals are compile time known so they can be used at top level.
* #file_contents now results in [] u8, not *u8.

Bug fixes:
* Fixed error message index for struct literal member type mismatch.
* Added struct member name in struct literal member type mismatch.
* Fixed freeing non-allocated memory when generating documentation.
* Fixed alignment issue with struct members.
