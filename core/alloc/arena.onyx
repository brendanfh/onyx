package core.alloc.arena

// This allocator is mostly used for making many fixed-size
// allocation (i.e. allocations that will not need to change
// in size, such as game entities or position structs). The
// power of this allocator over the heap allocator for this
// purpose is that it is much faster, since the logic is
// simpler. Another power of this allocator over something
// such as a dynamic array is that the dynamic array could
// relocate and cause any pointers to the data inside to
// become invalidated; this is definitely not behaviour you
// want. This arena allocator can grow as large as needed,
// while guaranteeing that the memory inside of it will
// never move.

ArenaState :: struct {
    backing_allocator : Allocator;

    first_arena   : ^Arena;
    current_arena : ^Arena;
    
    size       : u32;
    arena_size : u32;
}

Arena :: struct { next : ^Arena; }

#private_file
arena_alloc_proc :: (data: rawptr, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    alloc_arena := cast(^ArenaState) data;

    if aa == AllocationAction.Alloc {
        // An allocation of this size does not fit into a single arena.
        if size > alloc_arena.arena_size - sizeof rawptr {
            return null;
        }

        if alloc_arena.size % align != 0 {
            alloc_arena.size += align - (alloc_arena.size % align);
        }

        if alloc_arena.size + size >= alloc_arena.arena_size {
            new_arena := cast(^Arena) raw_alloc(alloc_arena.backing_allocator, alloc_arena.arena_size);
            if new_arena == null do return null;

            alloc_arena.size = sizeof rawptr;

            new_arena.next = null;
            alloc_arena.current_arena.next = new_arena;
            alloc_arena.current_arena = new_arena;
        }

        retval := cast(rawptr) (cast(^u8) alloc_arena.current_arena + alloc_arena.size);
        alloc_arena.size += size;

        return retval;
    }

    return null;
}

@Note // `arena_size` must be at least 4
make :: (backing: Allocator, arena_size: u32) -> ArenaState {
    assert(arena_size >= 4, "Arena size was expected to be at least 4 bytes.");
    
    initial_arena := cast(^Arena) raw_alloc(backing, arena_size);
    initial_arena.next = null;

    return ArenaState.{
        backing_allocator = backing,
        first_arena       = initial_arena,
        current_arena     = initial_arena,

        size              = sizeof rawptr,
        arena_size        = arena_size,
    };
}

make_allocator :: (rs: ^ArenaState) -> Allocator {
    return Allocator.{
        func = arena_alloc_proc,
        data = rs,
    };
}

free :: (arena: ^ArenaState) {
    walker := arena.first_arena;
    trailer := walker;
    while walker != null {
        walker = walker.next;
        raw_free(arena.backing_allocator, trailer);
        trailer = walker;
    }

    arena.first_arena   = null;
    arena.current_arena = null;
    arena.size          = 0;
}
