package core.alloc.ring

// This allocator is great for temporary memory, such as returning
// a pointer from a function, or storing a formatted string. The
// memory allocated using this allocator does not need to be freed.
// The idea is that as you keep allocating you will "wrap around"
// and start writing over memory that was allocated before. For this
// reason, it is not safe to use this for any kind of permanent
// allocation. Also, be wary that you provide this allocator with
// a buffer big enough to store as much data as you are going to need
// at any given time. 

RingState :: struct {
    base_ptr : rawptr;
    size     : u32;
    curr_ptr : rawptr;
}

#private_file
ring_alloc_proc :: (data: rawptr, aa: AllocationAction, size: u32, align: u32, oldptr: rawptr) -> rawptr {
    ss := cast(^RingState) data;

    if aa == .Alloc {
        retval := null;
        rem := ss.size - cast(u32) ss.curr_ptr + cast(u32) ss.base_ptr;

        if size <= rem {
            retval = ss.curr_ptr;
            ss.curr_ptr = cast(rawptr) (cast(u32) ss.curr_ptr + size);
        } else {
            ss.curr_ptr = ss.base_ptr;
            retval = ss.base_ptr;
        }

        return retval;
    }

    return null;
}

make :: (buffer: rawptr, length: u32) -> RingState {
    return .{
        base_ptr = buffer,
        curr_ptr = buffer,
        size     = length,
    };
}

make_allocator :: (rs: ^RingState) -> Allocator {
    return .{
        func = ring_alloc_proc,
        data = rs,
    };
}

