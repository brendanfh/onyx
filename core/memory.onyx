package core.memory

// This will be replaced / augmented with a memory_copy intrinsic
// when that is added to the compiler. There would be an easy flag
// to control if this implementation is used, or the intrinsic. The
// only case where this implementation should be used is in legacy
// systems where the memory_copy instruction is not available.
// However, it might be worth switching to an intrinsic completely
// and having the intrinsic know whether or not to output the instruction
// or an inlined version of this procedure.
use package core.intrinsics.wasm { memory_copy, memory_fill }

// Even though I thought this would work, this method of aliases functions
// does not currently work. There needs to be a second level of indirection
// on entities to allow for this case to work, which may not be hard to change
// but still needs to happen.
// copy :: memory_copy
// set  :: memory_fill

copy :: (dest: rawptr, src: rawptr, count: i32) do memory_copy(dest, src, count);
set  :: (dest: rawptr, byte: u8, count: i32)    do memory_fill(dest, byte, count);

// Old and slow copy and set
copy_ :: (dst_: rawptr, src_: rawptr, len: u32) {
    dst := cast(^u8) dst_;
    src := cast(^u8) src_;
    for i: 0 .. len do dst[i] = src[i];
}

set_ :: (start: rawptr, value: u8, length: u32) {
    s := cast(^u8) start;
    for i: 0 .. length do s[i] = value;
}

alloc_slice :: (sl: ^[] $T, count: i32, allocator := context.allocator) {
    sl.data  = raw_alloc(allocator, sizeof T * count);
    sl.count = count;
}

make_slice :: ($T: type_expr, count: i32, allocator := context.allocator) -> [] T {
    return <[] T>.{
        data = raw_alloc(allocator, sizeof T * count),
        count = count
    };
}

align :: proc {
    (size: ^u64, align: u64) {
        if *size % align != 0 {
            *size += align - (*size % align);
        }
    },

    (size: u64, align: u64) -> u64 {
        if size % align != 0 {
            size += align - (size % align);
        }
        return size;
    }        
}
