package core.string

use package core


alloc_copy :: (original: str, allocator := context.allocator) -> str {
    new_str : str;
    new_str.data = raw_alloc(allocator, sizeof u8 * original.count);
    new_str.count = original.count;
    copy(original, new_str);
    return new_str;
}

copy :: (orig: str, dest: str) {
    len := orig.count;
    if dest.count < len do len = dest.count;

    memory.copy(dest.data, orig.data, len);
}

from_cstr :: (s: cstr) -> str {
    return .{ data = s, count = length(s) };
}

free :: (s: str, allocator := context.allocator) do raw_free(allocator, s.data);

length :: proc {
    (s: str) -> u32 {
        return s.count;
    },

    (s: cstr) -> u32 {
        len := 0;
        c := s;
        while *c != #char "\0" {
            len += 1;
            c += 1;
        }

        return len;
    },
}

concat :: proc {
    (s1: str, s2: str, allocator := context.allocator) -> str {
        len1 := length(s1);
        len2 := length(s2);

        data := cast(^u8) raw_alloc(allocator, len1 + len2);
        memory.copy(data, s1.data, len1);
        memory.copy(data + len1, s2.data, len2);

        return str.{ data, len1 + len2 };
    },

    (into: ^[..] u8, s: str) -> str {
        array.ensure_capacity(into, into.count + s.count);
        memory.copy(into.data, s.data, into.count);
        into.count += s.count;
        return .{ into.data, into.count };
    }
}

split :: (s: str, delim: u8, allocator := context.allocator) -> []str {
    delim_count := 0;
    for i: 0 .. s.count do if s[i] == delim do delim_count += 1;

    strarr := cast(^str) raw_alloc(allocator, sizeof str * (delim_count + 1));

    curr_str := 0;
    begin := 0;

    for i: 0 .. s.count {
        if s[i] == delim {
            strarr[curr_str] = s.data[begin .. i];
            begin = i + 1;
            curr_str += 1;
        }
    }

    strarr[curr_str] = s.data[begin .. s.count];

    return strarr[0 .. delim_count + 1];
}

contains :: proc {
    (s: str, c: u8) -> bool {
        for ch: s do if ch == c do return true;
        return false;
    },

    (s: str, substr: str) -> bool {
        while i := 0; i < s.count {
            while j := 0; j < substr.count {
                if s[i + j] != substr[j] {
                    i += j + 1;
                    continue continue;
                }

                j += 1;
            }

            return true;
        }

        return false;
    },
}

// TODO: Check this for edge cases and other bugs. I'm not confident
// it will work perfectly yet.                   - brendanfh 2020/12/21
compare :: (str1: str, str2: str) -> i32 {
    i := 0;
    while i < str1.count && i < str2.count {
        if str1[i] == str2[i] do i += 1;
        else                  do break;
    }

    if i == str1.count && i == str2.count do return 0;
    return ~~(str1[i] - str2[i]);
}

#operator == equal
equal :: (str1: str, str2: str) -> bool {
    if str1.count != str2.count do return false;
    while i := 0; i < str1.count {
        if str1[i] != str2[i] do return false;
        i += 1;
    }
    return true;
}

starts_with :: (s: str, prefix: str) -> bool {
    if s.count < prefix.count do return false;
    while i := 0; i < prefix.count {
        if s[i] != prefix[i] do return false;
        i += 1;
    }
    return true;
}

ends_with :: (s: str, suffix: str) -> bool {
    if s.count < suffix.count do return false;
    while i := s.count - 1; i >= s.count - suffix.count {
        if s[i] != suffix[i] do return false;
        i -= 1;
    }
    return true;
}


strip_leading_whitespace :: proc {
    (s: ^str) {
        while true do switch s.data[0] {
            case #char " ", #char "\t", #char "\n", #char "\r" {
                s.data += 1;
                s.count -= 1;
            }

            case #default do return;
        }
    },
    
    (s: str) -> str {
        out := s;
        strip_leading_whitespace(^out);
        return out;
    },
}

strip_trailing_whitespace :: proc {
    (s: ^str) {
        while true do switch s.data[s.count - 1] {
            case #char " ", #char "\t", #char "\n", #char "\r" {
                s.count -= 1;
            }

            case #default do return;
        }
    },

    (s: str) -> str {
        out := s;
        strip_trailing_whitespace(^out);
        return out;
    },
}

trim_start :: proc {
    (s: ^str, char: u8) {
        while s.data[0] == char {
            s.data += 1;
            s.count -= 1;
        }
    },

    (s: str, char: u8) -> str {
        out := s;
        trim_start(^out, char);
        return out;
    }
}

trim_end :: proc {
    (s: ^str, char: u8) {
        while s.data[s.count - 1] == char {
            s.count -= 1;
        }
    },

    (s: str, char: u8) -> str {
        out := s;
        trim_end(^out, char);
        return out;
    }
}

advance :: proc {
    (s: ^str, chars := 1) {
        chars = math.min(chars, s.count);

        s.data += chars;
        s.count -= chars;
    },

    (s: str, chars := 1) -> str {
        chars = math.min(chars, s.count);
        out := s;

        out.data += chars;
        out.count -= chars;

        return out;
    }
}



// DEPRECATED
// Everything below this point is deprecated
read_u32 :: (s: ^str, out: ^u32) {
    n := 0;

    strip_leading_whitespace(s);
    while s.data[0] >= #char "0" && s.data[0] <= #char "9" {
        n *= 10;
        n += cast(u32) (s.data[0] - #char "0");

        s.data += 1;
        s.count -= 1;
    }

    *out = n;
}

read_char :: (s: ^str, out: ^u8) {
    *out = s.data[0];
    s.data += 1;
    s.count -= 1;
}

read_chars :: (s: ^str, out: ^str, char_count := 1) {
    out.data = s.data;
    out.count = char_count;
    s.data += char_count;
    s.count -= char_count;
}

discard_chars :: (s: ^str, char_count := 1) {
    s.data += char_count;
    s.count -= char_count;
}

// Goes up to but not including the closest newline or EOF
read_line :: (s: ^str, out: ^str) {
    out.data = s.data;
    out.count = 0;

    for ch: *s {
        if ch == #char "\n" do break;
        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    if s.count > 0 {
        s.data += 1;
        s.count -= 1;
    }
}

read_until :: (s: ^str, upto: u8, skip := 0) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch: *s {
        if ch == upto {
            if rem <= 0 do break;
            else do rem -= 1;
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

read_until_either :: (s: ^str, skip: u32, uptos: ..u8) -> str {
    if s.count == 0 do return "";

    out : str;
    out.data = s.data;
    out.count = 0;

    rem := skip;
    for ch: *s {
        for upto: uptos {
            if ch == upto {
                if rem <= 0 do break break;
                else do rem -= 1;
            }
        }

        out.count += 1;
    }

    s.data += out.count;
    s.count -= out.count;

    return out;
}

advance_line :: (s: ^str) {
    if s.count == 0 do return;

    adv := 0;
    while s.data[adv] != #char "\n" do adv += 1;

    s.data += adv + 1;
    s.count -= adv + 1;
}

read :: proc {
    read_u32, read_char
}
