package builtin

// CLEANUP: Should builtin.onyx really be including other files in the compilation?
// Does that complicate things too much?
#load "core/runtime/build_opts"
#private_file runtime :: package runtime

str  :: #type []u8;
cstr :: #type ^u8;

@Note
// Because of many implementation details, all fields of this
// struct are required to be i32's.
range :: struct {
    low  : i32;
    high : i32;
    step : i32 = 1;
}

vararg :: #type ^struct {
    data:  rawptr;
    count: i32;
}

vararg_get :: #match {
    (va: vararg, ret: ^$T) -> bool {
        if va.count <= 0 do return false;
        *ret = *cast(^T) va.data;
        va.data = cast(rawptr) (cast(^u8) va.data + sizeof T);
        va.count -= 1;
        return true;
    },

    (va: vararg, $T: type_expr, default: T = 0) -> (bool, T) {
        if va.count <= 0 do return false, default;
        ret := *cast(^T) va.data;
        va.data = cast(rawptr) (cast(^u8) va.data + sizeof T);
        va.count -= 1;
        return true, ret;
    }
}

@NullProcHack
null_proc :: () -> void #null ---
null      :: cast(rawptr) 0;

// I find myself wanting to return a completely nullified string like the
// one below that I decided to added a builtin binding for it. This might
// go away at some point and would just need to be defined in every file.
null_str  :: str.{ null, 0 }

OnyxContext :: struct {
    allocator      : Allocator;
    temp_allocator : Allocator;

    logger         : Logger = .{ default_logger, null };

    assert_handler : (msg: str, site: CallSite) -> void;
}

#if runtime.Runtime != runtime.Runtime_Custom {
    #private_file default_logger :: (data: rawptr, msg: str) {
        use package core
        println(msg);
    }

} else {
    #private_file default_logger :: (data: rawptr, msg: str) {
        // In a custom runtime, there is no way to know how to log something.
    }
}

// @Robustness
// Currently, because the only compilation target is WebAssembly, which is only
// single threaded for the moment, it is safe to store the context in a global
// variable. If other compilations targets are added, or if WebAssembly standardizes
// a multi-threading proposal, this context will need to be changed. Either it will
// need to be a thread-local variable, or it needs to be implicitly passed as the
// first parameter to ALL procedures in a compilation unit.
context : OnyxContext;

assert :: (cond: bool, msg: str, site := #callsite) {
    if !cond do context.assert_handler(msg, site);
}


//
// Basic logging
//

Logger :: struct {
    func : (data: rawptr, msg: str) -> void;
    data : rawptr;
}

log :: (msg: str, use logger: Logger = context.logger) {
    func(data, msg);
}


//
// Basic allocation structures.
// The implementations of all of the allocators can be found in core/alloc/.
// These need to be here so the context structure has the types and enum values.
//
#private_file
Default_Allocation_Alignment :: 16

AllocationAction :: enum {
    Alloc;
    Free;
    Resize;
}

#private_file
allocator_proc :: #type (data: rawptr, action: AllocationAction, size: u32, align: u32, old_ptr: rawptr) -> rawptr;

Allocator :: struct {
    data: rawptr;
    func: allocator_proc;
}

raw_alloc :: (use a: Allocator, size: u32, alignment := Default_Allocation_Alignment) -> rawptr {
    return func(data, AllocationAction.Alloc, size, alignment, null);
}

raw_resize :: (use a: Allocator, ptr: rawptr, size: u32, alignment := Default_Allocation_Alignment) -> rawptr {
    return func(data, AllocationAction.Resize, size, alignment, ptr);
}

raw_free :: (use a: Allocator, ptr: rawptr) {
    func(data, AllocationAction.Free, 0, 0, ptr);
}

// Allocators using the context structure.
calloc  :: (size: u32) -> rawptr do return raw_alloc(context.allocator, size);
cresize :: (ptr: rawptr, size: u32) -> rawptr do return raw_resize(context.allocator, ptr, size);
cfree   :: (ptr: rawptr) do raw_free(context.allocator, ptr);

// CLEANUP: Does this really need to be limited to a non-custom runtime?
#if runtime.Runtime != runtime.Runtime_Custom {
    new :: ($T: type_expr, allocator := context.allocator, initialize := true) -> ^T {
        res := cast(^T) raw_alloc(allocator, sizeof T);

        // @Robustness: This should be a '#if' when those are added in procedures because
        // otherwise the __initialize intrinsic is going to be generated no matter what.
        // This could be a problem if the type is not something that can be initialized.
        //
        // Static ifs in procedures are added now, however, much like nested procedures,
        // static ifs cannot "see" polymorphic variables. They are only evaluated once
        // NOT in the context of the polymorphic procedure they are instatiated in.
        // This will be changed eventually. 'make' can be used for the time being or
        // for forever.
        use package core.intrinsics.onyx { __initialize }
        if initialize do __initialize(res);
        
        return res;
    }

    make :: ($T: type_expr, allocator := context.allocator) -> ^T {
        return cast(^T) raw_alloc(allocator, sizeof T);
    }
}


Iterator :: struct (T: type_expr) {
    data:  rawptr;
    next:  (data: rawptr) -> (T, bool);
    close: (data: rawptr) -> void = null_proc;
}



// This structure represents the result of a '#callsite' expression. Currently,
// #callsite is only valid (and parsed) as a default value for a procedure parameter.
// It allows the function to get the address of the calling site, which can be
// used for error printing, unique hashes, and much more.
CallSite :: struct {
    file   : str;
    line   : u32;
    column : u32;
}
