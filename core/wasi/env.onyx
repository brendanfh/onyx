package core.env

#if (package runtime).Runtime != (package runtime).Runtime_Wasi {
    #error "'core.env' is only available with the 'wasi' runtime.";
}


use package wasi { environ_get, environ_sizes_get, Size }
#private map    :: package core.map
#private memory :: package core.memory
#private string :: package core.string

Environment :: struct {
    vars             : map.Map(str, str);

    buffer           : [] u8;
    buffer_allocator : Allocator;
}

get_env :: (allocator := context.allocator) -> Environment {
    env_count, env_buf_size : Size;
    environ_sizes_get(^env_count, ^env_buf_size);

    env_var := memory.make_slice(cstr, env_count, allocator=allocator);
    env_buf := memory.make_slice(u8, env_buf_size, allocator=allocator);

    environ_get(env_var.data, env_buf.data);

    while i := cast(i32) (env_var.count - 1); i >= 0 {
        defer i -= 1;

        env_var[i] = cast(cstr) (cast(^u32) env_var.data)[i];
    }

    env_map := map.make(str, str, "");
    for env: env_var {
        s := string.from_cstr(env);
        var := string.read_until(^s, #char "=");
        map.put(^env_map, var, string.advance(s, 1));
    }

    raw_free(allocator, env_var.data);

    return .{
        vars             = env_map,
        buffer           = env_buf,
        buffer_allocator = allocator,
    };
}

free_env :: (use env: ^Environment) {
    map.free(^vars);

    raw_free(buffer_allocator, buffer.data);
}
