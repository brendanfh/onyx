package core.iter

use package core.intrinsics.onyx { __zero_value }

filter :: (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    FilterIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        predicate: (T) -> bool;
    }

    filter_iterator := new(#type FilterIterator(T));
    filter_iterator.iterator = it;
    filter_iterator.predicate = predicate;

    next :: ($T: type_expr, data: rawptr) -> (T, bool) {
        fi := cast(^FilterIterator(T)) data;

        value, cont := fi.iterator.next(fi.iterator.data);
        if cont {
            while !fi.predicate(value) {
                value, cont = fi.iterator.next(fi.iterator.data);
                if !cont do return value, false;
            }

            return value, true;
        } else {
            return value, false;
        }
    }

    close :: ($T: type_expr, data: rawptr) {
        fi := cast(^FilterIterator(T)) data;
        fi.iterator.close(fi.iterator.data);
        cfree(data);
    }

    return .{
        data  = filter_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

map :: (it: Iterator($T), transform: (T) -> $R) -> Iterator(R) {
    MapIterator :: struct (T: type_expr, R: type_expr) {
        iterator:  Iterator(T);
        transform: (T) -> R;
    }

    map_iterator := new(#type MapIterator(T, R));
    map_iterator.iterator = it;
    map_iterator.transform = transform;

    next :: ($T: type_expr, $R: type_expr, data: rawptr) -> (R, bool) {
        mi := cast(^MapIterator(T, R)) data;

        value, cont := mi.iterator.next(mi.iterator.data);
        if !cont do return value, false;

        return mi.transform(value), true;
    }

    close :: ($T: type_expr, $R: type_expr, data: rawptr) {
        mi := cast(^MapIterator(T, R)) data;
        mi.iterator.close(mi.iterator.data);
        cfree(data);
    }

    return .{
        data  = map_iterator,
        next  = #solidify next  { T=T, R=R },
        close = #solidify close { T=T, R=R },
    };
}

take :: (it: Iterator($T), count: u32) -> Iterator(T) {
    TakeIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        remaining: u32;
    }

    take_iterator := new(#type TakeIterator(T));
    take_iterator.iterator = it;
    take_iterator.remaining = count;

    next :: ($T: type_expr, data: rawptr) -> (T, bool) {
        ti := cast(^TakeIterator(T)) data;
        if ti.remaining == 0 do return __zero_value(T), false;

        ti.remaining -= 1;
        return ti.iterator.next(ti.iterator.data);
    }

    close :: ($T: type_expr, data: rawptr) {
        ti := cast(^TakeIterator(T)) data;
        ti.iterator.close(ti.iterator.data);
        cfree(data);
    }

    return .{
        data  = take_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

take_while :: (it: Iterator($T), predicate: (T) -> bool) -> Iterator(T) {
    TakeIterator :: struct (T: type_expr) {
        iterator:  Iterator(T);
        predicate: (T) -> bool;
    }

    take_iterator := new(#type TakeIterator(T));
    take_iterator.iterator = it;
    take_iterator.predicate = predicate;

    next :: ($T: type_expr, data: rawptr) -> (T, bool) {
        ti := cast(^TakeIterator(T)) data;

        value, cont := ti.iterator.next(ti.iterator.data);
        if !cont do return value, false;

        return value, ti.predicate(value);
    }

    close :: ($T: type_expr, data: rawptr) {
        ti := cast(^TakeIterator(T)) data;
        ti.iterator.close(ti.iterator.data);
        cfree(data);
    }

    return .{
        data  = take_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

skip :: (it: Iterator($T), count: u32) -> Iterator(T) {
    SkipIterator :: struct (T: type_expr) {
        iterator: Iterator(T);
        to_skip:  i32;
        skipped:  bool = false;
    }

    skip_iterator := new(#type SkipIterator(T));
    skip_iterator.iterator = it;
    skip_iterator.to_skip = count;

    next :: ($T: type_expr, data: rawptr) -> (T, bool) {
        si := cast(^SkipIterator(T)) data;

        while !si.skipped && si.to_skip > 0 {
            si.to_skip -= 1;
            value, cont := si.iterator.next(si.iterator.data);

            if !cont {
                si.skipped = true;
                return value, false;
            }
        }

        return si.iterator.next(si.iterator.data);
    }

    close :: ($T: type_expr, data: rawptr) {
        si := cast(^SkipIterator(T)) data;
        si.iterator.close(si.iterator.data);
        cfree(data);
    }

    return .{
        data  = skip_iterator,
        next  = #solidify next  { T=T },
        close = #solidify close { T=T },
    };
}

#private_file Zipped :: struct (T: type_expr, R: type_expr) {
    first: T;
    second: R;
}

zip :: (left_iterator: Iterator($T), right_iterator: Iterator($R)) -> Iterator(Zipped(T, R)) {
    ZippedIterator :: struct (T: type_expr, R: type_expr) {
        iterator1: Iterator(T);
        iterator2: Iterator(R);
    }

    zipped_iterator := new(#type ZippedIterator(T, R));
    zipped_iterator.iterator1 = left_iterator;
    zipped_iterator.iterator2 = right_iterator;

    next :: ($T: type_expr, $R: type_expr, data: rawptr) -> (Zipped(T, R), bool) {
        zi := cast(^ZippedIterator(T, R)) data;

        v1, cont1 := zi.iterator1.next(zi.iterator1.data);
        v2, cont2 := zi.iterator2.next(zi.iterator2.data);

        return .{ v1, v2 }, cont1 && cont2;
    }

    close :: ($T: type_expr, $R: type_expr, data: rawptr) {
        zi := cast(^ZippedIterator(T, R)) data;
        zi.iterator1.close(zi.iterator1.data);
        zi.iterator2.close(zi.iterator2.data);
        cfree(data);
    }

    return .{
        data  = zipped_iterator,
        next  = #solidify next  { T=T, R=R },
        close = #solidify close { T=T, R=R },
    };
}

const :: (value: $T) -> Iterator(T) {
    next :: ($T: type_expr, data: rawptr) -> (T, bool) {
        value := *(cast(^T) data);
        return value, true;
    }

    allocated := cast(^T) calloc(sizeof T);
    *allocated = value;

    return .{
        data = allocated,
        next = #solidify next { T=T },
        close = cfree,
    };
}

fold :: (it: Iterator($T), initial_value: R, combine: (T, $R) -> R) -> R {
    for value: it {
        initial_value = combine(value, initial_value);
    }
    
    return initial_value;
}

to_array :: (it: Iterator($T), allocator := context.allocator) -> [..] T {
    array :: package core.array

    arr := array.make(T, allocator=allocator);
    for v: it do array.push(^arr, v);

    return arr;
}
