package core.array

use package core.intrinsics.onyx { __zero_value }

// [..] T == Array(T)
//   where
// Array :: struct (T: type_expr) {
//     data      : T;
//     count     : u32;
//     capacity  : u32;
//     allocator : Allocator;
// }

// ---------------------------------
//           Dynamic Arrays
// ---------------------------------
make :: ($T: type_expr, capacity := 4, allocator := context.allocator) -> [..] T {
    arr : [..] T;
    init(^arr, capacity, allocator);
    return arr;
}

init :: (arr: ^[..] $T, capacity := 4, allocator := context.allocator) {
    arr.count = 0;
    arr.capacity = capacity;
    arr.allocator = allocator;
    arr.data = raw_alloc(allocator, sizeof T * arr.capacity);
}

free :: (arr: ^[..] $T) {
    arr.count = 0;
    arr.capacity = 0;

    raw_free(arr.allocator, arr.data);
    arr.data = null;
}

copy :: (arr: ^[..] $T, allocator := context.allocator) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, arr.count, allocator);
    new_arr.count = arr.count;

    for i: 0 .. arr.count do new_arr.data[i] = arr.data[i];
    return new_arr;
}

copy_range :: (arr: ^[..] $T, r: range, allocator := context.allocator) -> [..] T {
    new_arr : [..] T;
    init(^new_arr, r.high - r.low, allocator);
    new_arr.count = r.high - r.low;

    for i: r do new_arr.data[i] = arr.data[i];
    return new_arr;
}

clear :: (arr: ^[..] $T) {
    arr.count = 0;
}

ensure_capacity :: (arr: ^[..] $T, capacity: u32) -> bool {
    if arr.capacity >= capacity do return true;

    while capacity > arr.capacity do arr.capacity <<= 1;
    new_data := raw_resize(arr.allocator, arr.data, sizeof T * arr.capacity);
    if new_data == null do return false;
    arr.data = new_data;
    return true;
}

push :: (arr: ^[..] $T, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;
    arr.data[arr.count] = x;
    arr.count += 1;
    return true;
}

insert :: (arr: ^[..] $T, idx: u32, x: T) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;

    arr.count += 1;
    while i := arr.count; i > idx {
        arr.data[i] = arr.data[i - 1];
        i -= 1;
    }

    arr.data[idx] = x;
    return true;
}

insert_empty :: (arr: ^[..] $T, idx: u32) -> bool {
    if !ensure_capacity(arr, arr.count + 1) do return false;

    arr.count += 1;
    while i := arr.count; i > idx {
        arr.data[i] = arr.data[i - 1];
        i -= 1;
    }

    return true;
}

remove :: (arr: ^[..] $T, elem: T) {
    move := 0;

    while i := 0; i < arr.count - move {
        defer i += 1;
        
        if arr.data[i + move] == elem do move += 1;
        if move != 0 do arr.data[i] = arr.data[i + move];
    }

    arr.count -= move;
}

delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    for i: idx .. arr.count - 1 {
        arr.data[i] = arr.data[i + 1];
    }

    arr.count -= 1;
}

fast_delete :: (arr: ^[..] $T, idx: u32) {
    if idx >= arr.count do return;

    arr.data[idx] = arr.data[arr.count - 1];
    arr.count -= 1;
}

pop :: (arr: ^[..] $T) -> T {
    if arr.count == 0 do return __zero_value(T);

    arr.count -= 1;
    return arr.data[arr.count];
}

// Uses '==' to compare for equality.
contains :: proc {
    (arr: ^[..] $T, x: T) -> bool {
        for it: *arr do if it == x do return true;
        return false;
    },

    (arr: [] $T, x: T) -> bool {
        for it: arr do if it == x do return true;
        return false;
    }
}

// Uses '+' to sum.
sum :: proc {
    (arr: ^[..] $T, start: T = 0) -> T {
        sum := start;
        for it: *arr do sum += it;
        return sum;
    },

    (arr: [] $T, start: T = 0) -> T {
        sum := start;
        for it: arr do sum += it;
        return sum;
    }
}

average :: (arr: ^[..] $T) -> T {
    sum := cast(T) 0;
    for it: *arr do sum += it;

    return sum / cast(T) arr.count;
}

to_slice :: (arr: ^[..] $T) -> [] T {
    return arr.data[0 .. arr.count];
}

/*
** Simple insertion sort
**    cmp should return >0 if left > right
*/
sort :: (arr: ^[..] $T, cmp: (T, T) -> i32) {
    for i: 1 .. arr.count {
        x := arr.data[i];
        j := i - 1;

        // NOTE: This is written this way because '&&' does not short circuit right now.
        while j >= 0 {
            if cmp(arr.data[j], x) > 0 {
                arr.data[j + 1] = arr.data[j];
                j -= 1;
            } else {
                break;
            }
        }

        arr.data[j + 1] = x;
    }
}

sort_ptr :: (arr: ^[..] $T, cmp: (^T, ^T) -> i32) {
    for i: 1 .. arr.count {
        j := i;

        while j > 0 {
            if cmp(^arr.data[j - 1], ^arr.data[j]) > 0 {
                arr.data[j], arr.data[j - 1] = arr.data[j - 1], arr.data[j];
                j -= 1;
            } else {
                break;
            }
        }
    }
}

fold :: proc {
    (arr: ^[..] $T, init: $R, f: (T, R) -> R) -> R {
        val := init;
        for it: *arr do val = f(it, val);
        return val;
    },

    (arr: [] $T, init: $R, f: (T, R) -> R) -> R {
        val := init;
        for it: arr do val = f(it, val);
        return val;
    }
}

map :: proc {
    (arr: ^[..] $T, f: (^T) -> void)          do for ^it: *arr do f(it);,
    (arr: ^[..] $T, f: (T) -> T)              do for ^it: *arr do *it = f(*it);,
    (arr: ^[..] $T, data: $R, f: (T, R) -> T) do for ^it: *arr do *it = f(*it, data);,
    (arr: [] $T, f: (^T) -> void)             do for ^it:  arr do f(it);,
    (arr: [] $T, f: (T) -> T)                 do for ^it:  arr do *it = f(*it);,
    (arr: [] $T, data: $R, f: (T, R) -> T)    do for ^it:  arr do *it = f(*it, data);,
}

#private_file
fold_idx_elem :: (arr: ^$T, count: i32, cmp: (T, T) -> bool) -> (i32, T) {
    idx  := 0;
    elem := arr[0];
    
    for i: 1 .. count {
        if cmp(arr[i], elem) {
            idx  = i;
            elem = arr[i];
        }
    }
    
    return idx, elem;
}

#private_file cmp_greater :: (x: $T, y: T) -> bool do return x > y;
#private_file cmp_less    :: (x: $T, y: T) -> bool do return x < y;

greatest :: proc {
    (arr: [..] $T) -> (i32, T) { return fold_idx_elem(arr.data, arr.count, cmp_greater); },
    (arr: [] $T)   -> (i32, T) { return fold_idx_elem(arr.data, arr.count, cmp_greater); },
    (arr: [$N] $T) -> (i32, T) { return fold_idx_elem(cast(^T) arr, N,     cmp_greater); },
}

least :: proc {
    (arr: [..] $T) -> (i32, T) { return fold_idx_elem(arr.data, arr.count, cmp_less); },
    (arr: [] $T)   -> (i32, T) { return fold_idx_elem(arr.data, arr.count, cmp_less); },
    (arr: [$N] $T) -> (i32, T) { return fold_idx_elem(cast(^T) arr, N,     cmp_less); },
}
