package core.io

memory :: package core.memory

Reader :: struct {
    stream : ^Stream;
}

reader_make :: (s: ^Stream) -> Reader {
    assert(s.vtable != null, "Stream vtable was not setup correctly.");
    
    return Reader.{ s };
}

reader_from_string :: (s: str) -> Reader {
    stream_ptr := new(StringStream);     @Leak
    *stream_ptr = string_stream_make(s);

    return Reader.{ stream_ptr };
}

read_byte :: (use reader: ^Reader) -> u8 {
    err, byte := stream_read_byte(stream);
    return byte;
}

read_bytes :: (use reader: ^Reader, bytes := 1, allocator := context.allocator) -> str {
    buffer := memory.make_slice(u8, bytes, allocator);
    stream_read(stream, buffer);
    return buffer;
}

read_u32 :: (use reader: ^Reader) -> u32 {
    n: u32 = 0;

    skip_whitespace(reader);

    err, curr := stream_peek_byte(stream);
    while curr >= #char "0" && curr <= #char "9" {
        err, curr = stream_read_byte(stream);

        n *= 10;
        n += cast(u32) (curr - #char "0"); 

        err, curr = stream_peek_byte(stream);
        if err == Error.EOF do break;
    }

    return n;
}

read_u64 :: (use reader: ^Reader) -> u64 {
    n: u64 = 0;

    skip_whitespace(reader);

    err, curr := stream_peek_byte(stream);
    while curr >= #char "0" && curr <= #char "9" {
        err, curr = stream_read_byte(stream);

        n *= 10;
        n += cast(u64) (curr - #char "0"); 

        err, curr = stream_peek_byte(stream);
        if err == Error.EOF do break;
    }

    return n;
}

read_line :: (use reader: ^Reader, consume_newline := true, allocator := context.allocator) -> str {
    _, curr_pos := stream_tell(stream);

    count := 0;
    err, curr := stream_read_byte(stream);
    while curr != #char "\n" {
        count += 1;

        err, curr = stream_read_byte(stream);
        if err != Error.None do break;
    }

    if consume_newline do count += 1;

    stream_seek(stream, curr_pos, SeekFrom.Start);

    out := str.{
        data  = raw_alloc(allocator, count * sizeof(u8)),
        count = count,
    };

    stream_read(stream, out);
    return out;
}

read_word :: (use reader: ^Reader, numeric_allowed := false, allocator := context.allocator) -> str {
    skip_whitespace(reader);

    _, curr_pos := stream_tell(stream);

    count := 0;
    err, curr := stream_read_byte(stream);

    while true {
        if     (curr >= #char "a" && curr <= #char "z")
            || (curr >= #char "A" && curr <= #char "Z")
            || curr == #char "_" {
            count += 1;
        } elseif numeric_allowed && (curr >= #char "0" && curr <= #char "9") {
            count += 1;
        } else {
            break;
        }

        err, curr = stream_read_byte(stream);
        if err != Error.None do break;
    }

    stream_seek(stream, curr_pos, SeekFrom.Start);

    out := str.{
        data  = raw_alloc(allocator, count * sizeof(u8)),
        count = count,
    };

    stream_read(stream, out);
    return out;
}

read_until :: (use reader: ^Reader, until: u8, skip: u32 = 0, allocator := context.allocator, consume_end := false) -> str {
    _, curr_pos := stream_tell(stream);

    count := 0;
    err, curr := stream_read_byte(stream);

    while true {
        if curr != until {
            count += 1;
        } else {
            if skip == 0 do break;
            else do skip -= 1;
        }

        err, curr = stream_read_byte(stream);
        if err != Error.None do break;
    }

    if consume_end do count += 1;

    stream_seek(stream, curr_pos, SeekFrom.Start);

    out := str.{
        data  = raw_alloc(allocator, count * sizeof(u8)),
        count = count,
    };

    stream_read(stream, out);
    return out;
}

peek_byte :: (use reader: ^Reader) -> u8 {
    err, byte := stream_peek_byte(stream);
    return byte;
}

advance_line :: (use reader: ^Reader) {
    err, curr := stream_read_byte(stream);
    if err != Error.None do return;
    
    while curr != #char "\n" {
        err, curr = stream_read_byte(stream);
        if err != Error.None do return;
    }

    err, curr = stream_read_byte(stream);
}

skip_whitespace :: (use reader: ^Reader) {
    while true {
        err, byte := stream_peek_byte(stream);
        if err == Error.EOF do break;

        switch byte {
            case #char " ", #char "\t", #char "\n", #char "\r" {
                err, byte = stream_read_byte(stream);
            }

            case #default do return;
        }
    }
}

skip_bytes :: (use reader: ^Reader, bytes: u32) {
    for _: bytes do stream_read_byte(stream);
}