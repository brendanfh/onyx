package core.io

#private_file conv :: package core.conv

Writer :: struct {
    stream : ^Stream;
}

writer_make :: (s: ^Stream) -> Writer {
    assert(s.vtable != null, "Stream vtable was not setup correctly.");

    return Writer.{ s };
}

write_byte :: (use writer: ^Writer, byte: u8) {
    stream_write_byte(stream, byte);
}

write_str :: (use writer: ^Writer, s: str) {
    stream_write(stream, s);
}

write_cstr :: (use writer: ^Writer, cs: cstr) {
    use package core

    s := string.from_cstr(cs);
    write_str(writer, s);
}

write_i32 :: (use writer: ^Writer, n: i32, base: u32 = 10) {
    use package core

    buf : [256] u8;
    s := conv.i64_to_str(cast(i64) n, cast(u64) base, ~~buf);
    write_str(writer, s);
}

write_i64 :: (use writer: ^Writer, n: i64, base: u64 = 10) {
    use package core

    buf : [256] u8;
    s := conv.i64_to_str(n, base, ~~buf);
    write_str(writer, s);
}

write_f32 :: (use writer: ^Writer, f: f32) {
    use package core

    buf : [256] u8;
    s := conv.f64_to_str(cast(f64) f, ~~buf);
    write_str(writer, s);
}

write_f64 :: (use writer: ^Writer, f: f64) {
    use package core

    buf : [256] u8;
    s := conv.f64_to_str(f, ~~buf);
    write_str(writer, s);
}

write_bool :: (use writer: ^Writer, b: bool) {
    if b do write_str(writer, "true");
    else do write_str(writer, "false");
}

write_ptr :: (use writer: ^Writer, p: ^void) {
    write_i64(writer, cast(i64) p, 16);
}

write_range :: (use writer: ^Writer, r: range, sep := " ") {
    for i: r {
        write_i32(writer, i);
        if i + r.step < r.high do write_str(writer, sep);
    }
}

write_format :: (use writer: ^Writer, format: str, va: ...) {
    // POTENTIAL BUG: this buffer will need to be bigger (or dynamic).
    buffer: [2048] u8;
    write_str(writer, conv.str_format_va(format, ~~buffer, va));
}

write_escaped_str :: (use writer: ^Writer, s: str) {
    write_byte(writer, #char "\"");

    while i := 0; i < s.count {
        defer i += 1;
        ch := s[i];

        @Incomplete
        switch ch {
            case #char "\n" { write_byte(writer, #char "\\"); write_byte(writer, #char "n");  }
            case #char "\r" { write_byte(writer, #char "\\"); write_byte(writer, #char "r");  }
            case #char "\t" { write_byte(writer, #char "\\"); write_byte(writer, #char "t");  }
            case #char "\v" { write_byte(writer, #char "\\"); write_byte(writer, #char "v");  }
            case #char "\b" { write_byte(writer, #char "\\"); write_byte(writer, #char "b");  }
            case #char "\f" { write_byte(writer, #char "\\"); write_byte(writer, #char "f");  }
            case #char "\0" { write_byte(writer, #char "\\"); write_byte(writer, #char "0");  }
            case #char "\"" { write_byte(writer, #char "\\"); write_byte(writer, #char "\""); }

            case #default {
                @Speed
                write_byte(writer, ch);
            }
        } 
    }

    write_byte(writer, #char "\"");
}

write :: #match {
    write_str, write_cstr, 
    write_i32, write_f32,
    write_i64, write_f64,
    write_bool,
    write_ptr,
    write_range,

    write_format,
}
