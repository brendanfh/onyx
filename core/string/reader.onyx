package core.string.reader

String_Reader :: struct {
    // Think of this as `use s : str`;
    data : ^u8;
    count : u32;

    // The original string.
    original_str : str;
}

make :: (s: str) -> String_Reader {
    reader : String_Reader;
    init(^reader, s);
    return reader;
}

init :: (use reader: ^String_Reader, orig_str: str) {
    original_str = orig_str;
    data  = original_str.data;
    count = original_str.count;
}

reset :: (use reader: ^String_Reader) {
    data  = original_str.data;
    count = original_str.count;
}

empty :: (use reader: ^String_Reader) -> bool do return count == 0;

read_u32 :: (use reader: ^String_Reader) -> u32 {
    n: u32 = 0;

    skip_whitespace(reader);

    while count > 0 && data[0] >= #char "0" && data[0] <= #char "9" {
        n *= 10;
        n += cast(u32) (data[0] - #char "0");

        data += 1;
        count -= 1;
    }

    return n;
}

read_u64 :: (use reader: ^String_Reader) -> u64 {
    n: u64 = 0;

    skip_whitespace(reader);

    while count > 0 && data[0] >= #char "0" && data[0] <= #char "9" {
        n *= 10;
        n += cast(u64) (data[0] - #char "0");

        data += 1;
        count -= 1;
    }

    return n;
}

read_byte :: (use reader: ^String_Reader) -> u8 {
    if count == 0 do return #char "\0";

    defer {
        data += 1;
        count -= 1;
    }

    return data[0];
}

read_bytes :: (use reader: ^String_Reader, byte_count := 1) -> str {
    bc := byte_count;
    if count < bc do bc = count;

    defer {
        data += bc;
        count -= bc;
    }

    return str.{ data, bc };
}

read_line :: (use reader: ^String_Reader) -> str {
    out : str;
    out.data = data;
    out.count = 0;

    for ch: *(cast(^str) reader) {
        if ch == #char "\n" do break;
        out.count += 1;
    }

    data += out.count;
    count -= out.count;

    if count > 0 {
        data += 1;
        count -= 1;
    }

    return out;
}

read_until :: (use reader: ^String_Reader, skip: u32, uptos: ..u8) -> str {
    if count == 0 do return str.{ null, 0 };

    out : str;
    out.data = data;
    out.count = 0;

    s := skip;
    
    for ch: *(cast(^str) reader) {
        for upto: uptos do if ch == upto {
            if s == 0 do break break;
            else do s -= 1;

            break;
        }

        out.count += 1;
    }

    data += out.count;
    count -= out.count;

    return out;
}

// Reads a continuous string of alphabetic chars along with underscores '_'
read_word :: (use reader: ^String_Reader) -> str {
    if count == 0 do return str.{ null, 0 };

    out := str.{ data, 0 };
    for ch: *(cast(^str) reader) {
        if     (ch >= #char "a" && ch <= #char "z")
            || (ch >= #char "A" && ch <= #char "Z")
            || ch == #char "_" {
            out.count += 1;            
        }
        else do break;
    }

    data += out.count;
    count -= out.count;

    return out;
}

advance_line :: (use reader: ^String_Reader) {
    if count == 0 do return;

    adv := 0;
    while data[adv] != #char "\n" && adv <= count - 1 do adv += 1;

    data += adv + 1;
    count -= adv + 1;
}


skip_whitespace :: (use reader: ^String_Reader) {
    while count > 0 do switch data[0] {
        case #char " ", #char "\t", #char "\n", #char "\r" {
            data += 1;
            count -= 1;
        }

        case #default do return;
    }
}

skip_bytes :: (use reader: ^String_Reader, byte_count := 1) {
    bc := byte_count;
    if count < bc do bc = count;

    data += bc;
    count -= bc;
}



starts_with :: (use reader: ^String_Reader, s: str) -> bool {
    if count < s.count do return false;
    while i := 0; i < s.count {
        if data[i] != s[i] do return false;
        i += 1;
    }
    return true;
}
