package core.string.builder

// DEPRECATED: This package is deprecated in favor of using
// an io.DynamicStringStream with an io.Writer.

#if false {

#private_file array  :: package core.array
#private_file string :: package core.string
#private_file conv   :: package core.conv

Builder :: struct {
    data  : [..] u8;
}

make :: (initial_cap := 4, alloc := context.allocator) -> Builder {
    builder : Builder;
    array.init(^builder.data, initial_cap, allocator = alloc);

    return builder;
}

clear :: (use sb: ^Builder) -> ^Builder {
    data.count = 0;
    return sb;
}

add_str :: (use sb: ^Builder, s: str) -> ^Builder {
    len_total := data.count + s.count;

    if data.capacity < len_total {
        if !array.ensure_capacity(^data, len_total) do return sb;
    }

    for i: 0 .. s.count do data[data.count + i] = s[i];
    data.count += s.count;
    return sb;
}

add_cstr :: (use sb: ^Builder, cstring: cstr) -> ^Builder {
    s := string.from_cstr(cstring);
    return add_str(sb, s);
}

add_i64 :: (use sb: ^Builder, n: i64, base: u64 = 10) -> ^Builder {
    buf : [256] u8;
    s := conv.i64_to_str(n, base, buf[0 .. 256]);
    return add_str(sb, s);
}

add_f64 :: (use sb: ^Builder, f: f64) -> ^Builder {
    buf : [256] u8;
    s := conv.f64_to_str(f, buf[0 .. 256]);
    return add_str(sb, s);
}

add_bool :: (use sb: ^Builder, b: bool) -> ^Builder {
    if b do return add_str(sb, "true");
    else do return add_str(sb, "false");

    return sb;
}

append :: #match {
    add_str,
    add_cstr,
    add_i64,
    add_f64,
    add_bool,
}

to_str :: (use sb: ^Builder) -> str {
    return str.{ data.data, data.count };
}

}