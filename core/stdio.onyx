package core
// Currently, these symbols are dumped in the 'core' namespace, which means
// most programs that just 'use package core' can access all of them, which
// is convenient; However, it doesn't hurt to wonder if they should be the
// 'core.io' package so these would become like 'io.printf(...)'. Of course,
// you could always still do 'use package core.io', which would bring these
// in anyway.


#private_file runtime :: package runtime
#if runtime.Runtime == runtime.Runtime_Custom {
    #error "'stdio' can only be included in the 'wasi' or 'js' runtime."
}

auto_flush_stdio := true

print :: #match {
    (x: str) {
        io.write(^stdio.print_writer, x);
        if x[x.count - 1] == #char "\n" && auto_flush_stdio do __flush_stdio();
    },

    (x: $T)        { io.write(^stdio.print_writer, x); },
    (x: $T, y: $R) { io.write(^stdio.print_writer, x, y); },
}

println :: (x: $T) {
    print(x);
    print("\n");
}

printf :: (format: str, va: ...) {
    buffer: [2048] u8;
    print(conv.str_format_va(format, buffer[0 .. 2048], va));
}

// This works on both slices and arrays
print_array :: #match {
    (arr: [$N] $T, sep := " ") {
        for i: 0 .. N {
            print(arr[i]);
            if i != N - 1 do print(sep);
        }

        print("\n");
    },

    (arr: $T, sep := " ") {
        for i: 0 .. arr.count {
            print(arr.data[i]);
            if i != arr.count - 1 do print(sep);
        }

        print("\n");
    }
}

byte_dump :: (ptr: rawptr, byte_count: u32, bytes_per_line := 8) {
    temp: [3] u8;

    u8_ptr := cast(^u8) ptr;
    for i: byte_count {
        val := u8_ptr[i];

        temp[0] = map_to_ascii(val >> 4);
        temp[1] = map_to_ascii(val & 15);
        temp[2] = #char " ";

        runtime.__output_string(~~temp);

        if i % bytes_per_line == (bytes_per_line - 1) do runtime.__output_string("\n");
    }


    map_to_ascii :: (x: u8) -> u8 {
        switch x {
            case 0 do return  #char "0";
            case 1 do return  #char "1";
            case 2 do return  #char "2";
            case 3 do return  #char "3";
            case 4 do return  #char "4";
            case 5 do return  #char "5";
            case 6 do return  #char "6";
            case 7 do return  #char "7";
            case 8 do return  #char "8";
            case 9 do return  #char "9";
            case 10 do return #char "A";
            case 11 do return #char "B";
            case 12 do return #char "C";
            case 13 do return #char "D";
            case 14 do return #char "E";
            case 15 do return #char "F";
            case #default do return #char "X";
        }
    }
}


//
// Private and internal things
//

stdio : struct {
    print_stream : io.DynamicStringStream;
    print_writer : io.Writer;
}

__stdio_init :: () {
    stdio.print_stream = io.dynamic_string_stream_make(2048, context.allocator);
    stdio.print_writer = io.writer_make(^stdio.print_stream);
}


__flush_stdio :: () {
    if stdio.print_stream.data.count == 0 do return;

    ^stdio.print_stream
        |> io.dynamic_string_stream_to_str()
        |> runtime.__output_string();

    ^stdio.print_stream |> io.stream_flush();
}

