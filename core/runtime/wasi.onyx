package runtime

#load "core/wasi/wasi"
#load "core/runtime/common"

use package wasi
use package core

__output_string :: (s: str) -> u32 {
    STDOUT_FILENO :: 1

    vec := IOVec.{ buf = cast(u32) s.data, len = s.count };
    tmp : Size;
    fd_write(STDOUT_FILENO, IOVecArray.{ cast(u32) ^vec, 1 }, ^tmp);
    fd_datasync(STDOUT_FILENO);
    return tmp;
}

__exit :: (status: i32) do proc_exit(status);

// The builtin _start proc.
// Sets up everything needed for execution.
#export "_start" () {
    __runtime_initialize();

    args : [] cstr;
    argv_buf_size : Size;
    args_sizes_get(^args.count, ^argv_buf_size);

    args = memory.make_slice(cstr, args.count);
    argv_buf := cast(cstr) calloc(argv_buf_size);
    args_get(args.data, argv_buf);


    // This post processing of the argv array needs to happen if the target is using
    // 32-bit pointers, instead of 64-bits. Right now, Onyx pointers take up 64-bits,
    // but in most circumstances, only the lower 32-bits are used. When webassembly
    // standardizes the 64-bit address space, it will be an easy conversion over.
    // But for right now, WASI will give the argv array 32-bit pointers, instead of
    // 64-bit pointers. This loops expands the 32-bit pointers into 64-bit pointers
    // while not clobbering any of them.
    while i := cast(i32) (args.count - 1); i >= 0 {
        defer i -= 1;

        args[i] = cast(cstr) (cast(^u32) args.data)[i];
    }

    (package main).main(args);

    __flush_stdio();
}
