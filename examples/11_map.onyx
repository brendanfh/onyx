#load "core/std/wasi"

use package core

main :: proc (args: [] cstr) {
    // Onyx does not have map type built into the language semantics,
    // but using polymorphic structs and overloaded procedures, it does
    // provide an 'any-to-any' hash map in it's core libraries.

    // To use it, simply create one like so:
    ages : map.Map(str, u32);
    map.init(^ages, default=0, hash_count=16);
    defer map.free(^ages);

    // Alternatively you can use the map.make function to achieve the
    // same thing:
    // ages := map.make(str, u32, default = 0);

    // The defer statement ensures that the map memory will be freed
    // when this procedure exits, no matter through which way. The
    // 'default' argument is used to specify what value should be
    // returned when the map does not contain the requested key. The
    // hash_count is an implementation detail that will go away in the
    // near future. It is the maximum number of chains in the hash table.

    // To put an entry into the map, use the map.put procedure.
    map.put(^ages, "Dwight", 32);
    map.put(^ages, "Jim", 25);
    map.put(^ages, "Pam", 24);

    // To retrieve an entry's value, use the map.get procedure.
    print_age :: proc (ages: ^map.Map(str, u32), name: str) {
        age := map.get(ages, name);
        printf("%s's age is %i.\n", name, age);
    }

    print_age(^ages, "Dwight");
    print_age(^ages, "Jim");
    print_age(^ages, "Pam");
    print_age(^ages, "Michael");

    // You may noticed if you ran this program that it prints Michael's
    // age is 0. This is because there was entry for the key 'Michael',
    // and we provided the default of '0'. To ensure that a key is in the
    // map, use the map.has procedure

    println(map.has(^ages, "Dwight"));
    println(map.has(^ages, "Michael"));



    // Not now nor ever will Onyx support an "interface" concept to say
    // which types can do which things. One thing that Onyx does have
    // however is explicit overloaded procedures. They are talked about
    // more in 14_overloaded_procs.onyx. For our purposes right now, we
    // just need to know that Map uses two overloaded procedures to
    // achieve its implementation: map.hash_function, map.cmp_function.
    // To make Map work with any new datatype you come up with, simply
    // define an overload for map.hash_function and map.cmp_function.
    // If you want to see what this looks like, take a look at
    // tests/aoc-2020/day17.onyx in this repository.
}
