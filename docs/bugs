List of known bugs:

[ ] Compound assignment operators such as += evaluate the location of their left-value twice.
    Not only is this bad for efficiency, if the value requires calling a function, that
    function will be called twice instead of once. This is a simple code generation fix,
    but will require not destroying this information in the checking phase of the compiler.

[ ] This currently does not work but I think it should:

    baked_proc :: (x: $T, $func: (T) -> T) -> T {
        return func(x);
    }

    The problem is that 'T' is an unresolved symbol because the context of the function type
    does not have the solved value of T in it.

[ ] Top level implicit typed arrays/struct literals are not correctly being marked as compile-time.

    Vec2 :: struct { x, y: i32; }
    
    Hex_Directions := Vec2.[
        .{  1, 0 }, .{  1, -1 }, .{ 0, -1 }, 
        .{ -1, 0 }, .{ -1,  1 }, .{ 0,  1 }, 
    ];

[ ] :UnaryFieldAccessIsGross

[ ] Segfault when trying to immediately access type inferred array literal.
    println( (.[ 1, 2, 3, 4, 5 ])[0] );

[ ] Why are character literals signed????

[ ] Aliasing in many cases does not work. For example:
    
    SomeNamespace :: struct {
        foo :: () { ... }
        bar :: ...
    }

    {
        SN :: SomeNamespace

        SN.foo()
    }

[X] Enum parsing causes segfaults if the syntax is not EXACTLY what is expected. Some cases that break:
    enum { Foo, Bar, Baz };
    enum { Foo; Bar; Baz };

[X] Using a package in the middle of a procedures removes all remaining statements in the procedure.
    This is mostly likely due to the changes made with use package statements being treated as entities now.
    
    use_package_breaking :: () {
        println("Test 1");

        use package foo

        println("Test 2");
    }

[X] Array literals used as default values for struct members can break things.
    
    Foo :: struct {
        arr : [5] u32 = u32.[ 2, 3, 5, 7, 11 ];
    }

    foo := Foo.{};        OR          foo := new(Foo);

[X] There is a segfault when passing an anonymous struct literal to an untyped vararg.
    Should just need to detect this case and provide an error message since this doesn't
    make any sense semantically.
    
    vararg_proc :: (va: ...) {
        ...
    }

    vararg_proc(.{ 1, 2 });


[X] `fallthrough` in a for loop does not emit deferred statments correctly.

List of things to change:
[X] Currently, there is no way to use the initialized members of a structure without using a struct literal.
    There should be a initialize intrinsic procedure that takes a pointer to anything and initializes it.
    For example:

    initialize :: (x: ^$T) -> void #intrinsic ---

    Foo :: struct {
        x := 1;
        y : f32;
    }

    x : Foo;
    initialize(^x);

    // x.x = 1
    // x.y = <uninitialized>

[ ] Add functionality to #solidify that resolves to a procedure given a set of types. For example:
    overloaded :: proc {
        (x: str) { println("String function!"); },
        (x: i32) { println("Int function!"); },
        (x: f32) { println("Float function!"); },
        (x: $T)  { println("Other function!"); },
        (z: $T)  { println("Other function ZZZ!"); },
    }

    int_function :: #solidify overloaded(i32);
    int_function(); // Int function!

    other_function :: #solidify overloaded(range);
    other_function(); // Other function!

    wont_work :: #solidify overloaded(y = i32); // This won't work because overloaded doesn't have a 'y'
    will_work :: #solidify overloaded(z = range); // This will work because overloaded does have a 'z'

    Obviously this will also work on a non-overloaded, only polymorphic procedure.

[X] Anonymous struct, enum and array literals.
