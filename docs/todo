Macro level tasks that need to be worked on:

Command Line Interface:
    Currently, the command line interface is trash. Pretty much the only thing
    you can do is compile a binary file from a set of files. There are many
    more things I would like to do with the CLI, including:
        - Documentation generation in text, HTML, or man pages
        - Add statistic printing (time taken, SLOC, etc)
        - Abstract syntax tree printing
        - Running the binary right away using Wasmtime, Wasmer or NodeJS

    [X] Remove old code from CLI logic
    [X] Add statistic printing
    [ ] Fix documentation generation (broken since compiler architecture change) 
    [ ] Fix AST printing (broken for a long time)
    [ ] Add automated running component
        - Store to temporary file (OS independent)
        - Detect / choose WASM backend
        - Run it
        - Clean up

    Another throught would be an extensible command line interface, like what
    Zig has I believe. The idea is there are a couple fixed commands, such as
    'compile', 'help', etc. But in a folder such as ~/.local/share/onyx/cmd
    or /usr/share/onyx/cmd, there can be other executables that are invoked if
    their name is used after the 'onyx' command. For example,

        $ onyx compile foo.onyx
        This would be a built in command.

        $ onyx run foo.onyx
        This would try to execute an executable named 'run' either:
            - ./.onyx/cmd
            - ~/.local/share/onyx/cmd/
            - /usr/share/onyx/cmd/

    There would be some kind of precedence to finding the executable, but
    this level of control allows for extensible commands to be run based
    on the project. My only problem with this idea is that it does not port
    well to Windows, but it would be worth considering for sure.

Language Cohesion:
    There are a couple areas of the language that have little gotchas because
    of technical laziness. Cleaning up these areas will help the language feel
    more cohesive and put together.

    [X] Add array literals; The semantics of how array literals will work in
        terms of being an value that can be passed around have not been solidified,
        but there are many circumstances where having array literals for static
        constant data (such as MD5 hash vectors) would be useful.

        Array literals work only for static constant data outside of procedures.
        Array literals also now work in expressions.
        I changed the semantics of assignment for array types. Instead of just
        copying the pointer to the array, ALL elements of the source array are
        copied into the destination array.

    [X] Struct literals can only have 1 level of package before the struct
        name. This is because packages were not able to be nested, so having
        arbitrary package levels before a struct literal was not necessary.
        The following should work when this is patched:

            var := some.packages.nested.here.StructName.{ value1, value2, ... };

    [X] 'use' statements have two different variations and should be unified.
        They can be used to include a package, 'use package', and they can
        be used to add names from a namespace to the current scope. The problem
        is that 'use package' can only be at the top level, and 'use' can only
        be used at the block level.
        
    [X] :: should not declare a local variable, just bind a name to an expression.
        They can still be lexically scoped.

    [X] Currently accessing a field directly on a function call produces invalid
        WASM code; i.e.  foo().bar; This should at least produce an error until
        the underlying issue is fixed.

    [X] Every type should have a unique id assigned to it. This would make it
        easier to talk about types in a concrete way (for polymorphism and such),
        and would prepare the compiler to output type information into data section.

        This has been implemented for structs and enums, since those are the two
        types that you can control the name and inadvertently give the same name
        to two different structs / enums.

    [X] Switches should have range based statements, i.e.
            switch expr {
                case 10 .. 14 do ...
            }

        The only reason I have not implemented this feature is because it would
        introduce a slight inconsistency in the language design. Generally, the
        range (..) operator talks about ranges as inclusive low and exclusive
        high, which makes sense for for-loops and the like. However, for the switch
        statement, I think that would be very confusing. In the example above,
        I would expect the case to trip when `expr` is 14. This isn't a techinal
        problem; implementing this feature will be fairly straight forward. It
        is just a language design problems, because it requires a bit of extra
        thought to remember that ranges in for-loops and slices are NOT inclusive
        on the upper end.

    [X] Functions should be polymorphic on the size of array parameters. For example,
            foo :: proc (arr: [$N] $T) { ... }
        should be polymorphic on both the type of the array elements and the array
        size. This would allow for better support for fixed size arrays, as well
        as some needed built in functions such as:
            array_to_slice :: proc (arr: [$N] $T) -> [] T {
                return arr[0 .. N];
            }

    [ ] Functions should return the correct value in all branches.

    [ ] Add macros.

    [ ] enum #flags should be able to be used as so:
        ```
        SomeEnum :: enum #flags {
            Property1; 
            Property2; 
            Property3; 
        }

        val : SomeEnum = ~~0;
        val.Property1 = true;
        val.Property3 = true;

        // This should also be allowed.
        val |= SomeEnum.Property2;

        if val.Property2 { ... }
        ```

    [X] #solidify polymoprhic procedures.

API Expansion:
    There are many different places where the standard API for WASI and JS
    backends could be improved. Here are some of the target areas.

    [X] Rearrange APIs. There is a lot of functionality in the standard libraries,
        but it isn't organized in a usable way.
        - 'core.array' contains a lot of functionality that would also apply to
          slices. 'core.slice' should contain this functionality and 'core.array'
          can provide wrappers that convert the array to a slice.
        ✔ 'core.str' is a bad name, it should be 'core.string'. The issue is that
          it conflicts with 'builtin.string'. These two should be switched. Type
          name should be 'str' and package name should be 'string'

    [ ] Expand capabilities of file api on WASI.
    [ ] Add clock / time api for both backends
    [ ] Better random number api
    [ ] Better string formatting and parsing api

Usability:
    Currently, the compiler can only work on Linux. This is an arbitrary
    restriction due completely to my laziness and lack of access to a
    Windows / MacOS computer.

    [X] Make README on GitHub better, and actually describe what to do
    [X] Make compiler work on Windows
    [ ] Make compiler work on MacOS
    [ ] Make Onyx easier to use from JS
    [ ] Add examples for the following language features:
        ✔ Slices
        ✔ Dynamic Arrays
        ✔ Structs and unions
        ✔ Enums
        ✔ switch statements
        ✔ for loops
        ✔ Maps
        ✔ pipe operator
        - varargs
        - `use` keyword
        - Overloaded procedures
        - Polymorphic procedures
        - WASM directives (#export, #foreign)
        - #solidify directive
        - SIMD
